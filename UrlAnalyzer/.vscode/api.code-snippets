{
	// Place your vivarte-api workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"RouteHandler": {
		"scope": "typescript",
		"prefix": "routeHandler",
		"body": [
			"import { RouteManager } from '@structures/routeClass.js';",
			"",
			"export default class ${1:Route} extends RouteManager {",
			"\tpublic constructor() {",
			"\t\tsuper('${2:Path}');",
			"\t}",
			"",
			"}"
		],
		"description": "RouteHandler"
	},
	"HttpHandlerImprorts": {
		"scope": "typescript",
		"prefix": "httpHandlerWithImport",
		"body": [
			"import { HttpError } from '@structures/httpError.js';",
			"import { errorResponse } from '@utils/respond.js';",
			"import type { Request, Response } from 'express';",
			"",
			"export async function ${1:name}Handler(req: Request, res: Response): Promise<void> {",
			"\ttry {",
			"\t\t// Code here",
			"\t} catch (error) {",
			"\t\terrorResponse(HttpError.fromError(error as Error), res);",
			"\t}",
			"}"
		],
		"description": "HttpHandler"
	},
	"HttpHandlerNoImport": {
		"scope": "typescript",
		"prefix": "httpHandlerNoImport",
		"body": [
			"export async function ${1:name}Handler(req: Request, res: Response): Promise<void> {",
			"\ttry {",
			"\t\t// Code here",
			"\t} catch (error) {",
			"\t\terrorResponse(HttpError.fromError(error as Error), res);",
			"\t}",
			"}"
		],
		"description": "HttpHandler"
	},
	"RouteTryCatch": {
		"scope": "typescript",
		"prefix": "routeTryCatch",
		"body": ["try {", "", "} catch (error) {", "\terrorResponse(HttpError.fromError(error as Error), res);", "}"],
		"description": "RouteTryCatch"
	}
}
