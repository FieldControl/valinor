// DO NOT MODIFY, this file is autogenerated by tools/build.ts
export * from 'firebase/auth';
import { ɵzoneWrap } from '@angular/fire';
import { applyActionCode as _applyActionCode, beforeAuthStateChanged as _beforeAuthStateChanged, checkActionCode as _checkActionCode, confirmPasswordReset as _confirmPasswordReset, connectAuthEmulator as _connectAuthEmulator, createUserWithEmailAndPassword as _createUserWithEmailAndPassword, deleteUser as _deleteUser, fetchSignInMethodsForEmail as _fetchSignInMethodsForEmail, getAdditionalUserInfo as _getAdditionalUserInfo, getAuth as _getAuth, getIdToken as _getIdToken, getIdTokenResult as _getIdTokenResult, getMultiFactorResolver as _getMultiFactorResolver, getRedirectResult as _getRedirectResult, initializeAuth as _initializeAuth, isSignInWithEmailLink as _isSignInWithEmailLink, linkWithCredential as _linkWithCredential, linkWithPhoneNumber as _linkWithPhoneNumber, linkWithPopup as _linkWithPopup, linkWithRedirect as _linkWithRedirect, multiFactor as _multiFactor, onAuthStateChanged as _onAuthStateChanged, onIdTokenChanged as _onIdTokenChanged, parseActionCodeURL as _parseActionCodeURL, reauthenticateWithCredential as _reauthenticateWithCredential, reauthenticateWithPhoneNumber as _reauthenticateWithPhoneNumber, reauthenticateWithPopup as _reauthenticateWithPopup, reauthenticateWithRedirect as _reauthenticateWithRedirect, reload as _reload, sendEmailVerification as _sendEmailVerification, sendPasswordResetEmail as _sendPasswordResetEmail, sendSignInLinkToEmail as _sendSignInLinkToEmail, setPersistence as _setPersistence, signInAnonymously as _signInAnonymously, signInWithCredential as _signInWithCredential, signInWithCustomToken as _signInWithCustomToken, signInWithEmailAndPassword as _signInWithEmailAndPassword, signInWithEmailLink as _signInWithEmailLink, signInWithPhoneNumber as _signInWithPhoneNumber, signInWithPopup as _signInWithPopup, signInWithRedirect as _signInWithRedirect, signOut as _signOut, unlink as _unlink, updateCurrentUser as _updateCurrentUser, updateEmail as _updateEmail, updatePassword as _updatePassword, updatePhoneNumber as _updatePhoneNumber, updateProfile as _updateProfile, useDeviceLanguage as _useDeviceLanguage, verifyBeforeUpdateEmail as _verifyBeforeUpdateEmail, verifyPasswordResetCode as _verifyPasswordResetCode } from 'firebase/auth';
export const applyActionCode = ɵzoneWrap(_applyActionCode, true);
export const beforeAuthStateChanged = ɵzoneWrap(_beforeAuthStateChanged, true);
export const checkActionCode = ɵzoneWrap(_checkActionCode, true);
export const confirmPasswordReset = ɵzoneWrap(_confirmPasswordReset, true);
export const connectAuthEmulator = ɵzoneWrap(_connectAuthEmulator, true);
export const createUserWithEmailAndPassword = ɵzoneWrap(_createUserWithEmailAndPassword, true);
export const deleteUser = ɵzoneWrap(_deleteUser, true);
export const fetchSignInMethodsForEmail = ɵzoneWrap(_fetchSignInMethodsForEmail, true);
export const getAdditionalUserInfo = ɵzoneWrap(_getAdditionalUserInfo, true);
export const getAuth = ɵzoneWrap(_getAuth, true);
export const getIdToken = ɵzoneWrap(_getIdToken, true);
export const getIdTokenResult = ɵzoneWrap(_getIdTokenResult, true);
export const getMultiFactorResolver = ɵzoneWrap(_getMultiFactorResolver, true);
export const getRedirectResult = ɵzoneWrap(_getRedirectResult, true);
export const initializeAuth = ɵzoneWrap(_initializeAuth, true);
export const isSignInWithEmailLink = ɵzoneWrap(_isSignInWithEmailLink, true);
export const linkWithCredential = ɵzoneWrap(_linkWithCredential, true);
export const linkWithPhoneNumber = ɵzoneWrap(_linkWithPhoneNumber, true);
export const linkWithPopup = ɵzoneWrap(_linkWithPopup, true);
export const linkWithRedirect = ɵzoneWrap(_linkWithRedirect, true);
export const multiFactor = ɵzoneWrap(_multiFactor, true);
export const onAuthStateChanged = ɵzoneWrap(_onAuthStateChanged, true);
export const onIdTokenChanged = ɵzoneWrap(_onIdTokenChanged, true);
export const parseActionCodeURL = ɵzoneWrap(_parseActionCodeURL, true);
export const reauthenticateWithCredential = ɵzoneWrap(_reauthenticateWithCredential, true);
export const reauthenticateWithPhoneNumber = ɵzoneWrap(_reauthenticateWithPhoneNumber, true);
export const reauthenticateWithPopup = ɵzoneWrap(_reauthenticateWithPopup, true);
export const reauthenticateWithRedirect = ɵzoneWrap(_reauthenticateWithRedirect, true);
export const reload = ɵzoneWrap(_reload, true);
export const sendEmailVerification = ɵzoneWrap(_sendEmailVerification, true);
export const sendPasswordResetEmail = ɵzoneWrap(_sendPasswordResetEmail, true);
export const sendSignInLinkToEmail = ɵzoneWrap(_sendSignInLinkToEmail, true);
export const setPersistence = ɵzoneWrap(_setPersistence, true);
export const signInAnonymously = ɵzoneWrap(_signInAnonymously, true);
export const signInWithCredential = ɵzoneWrap(_signInWithCredential, true);
export const signInWithCustomToken = ɵzoneWrap(_signInWithCustomToken, true);
export const signInWithEmailAndPassword = ɵzoneWrap(_signInWithEmailAndPassword, true);
export const signInWithEmailLink = ɵzoneWrap(_signInWithEmailLink, true);
export const signInWithPhoneNumber = ɵzoneWrap(_signInWithPhoneNumber, true);
export const signInWithPopup = ɵzoneWrap(_signInWithPopup, true);
export const signInWithRedirect = ɵzoneWrap(_signInWithRedirect, true);
export const signOut = ɵzoneWrap(_signOut, true);
export const unlink = ɵzoneWrap(_unlink, true);
export const updateCurrentUser = ɵzoneWrap(_updateCurrentUser, true);
export const updateEmail = ɵzoneWrap(_updateEmail, true);
export const updatePassword = ɵzoneWrap(_updatePassword, true);
export const updatePhoneNumber = ɵzoneWrap(_updatePhoneNumber, true);
export const updateProfile = ɵzoneWrap(_updateProfile, true);
export const useDeviceLanguage = ɵzoneWrap(_useDeviceLanguage, true);
export const verifyBeforeUpdateEmail = ɵzoneWrap(_verifyBeforeUpdateEmail, true);
export const verifyPasswordResetCode = ɵzoneWrap(_verifyPasswordResetCode, true);
//# sourceMappingURL=data:application/json;base64,