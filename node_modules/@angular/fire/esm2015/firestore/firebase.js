// DO NOT MODIFY, this file is autogenerated by tools/build.ts
export * from 'firebase/firestore';
import { ɵzoneWrap } from '@angular/fire';
import { addDoc as _addDoc, arrayRemove as _arrayRemove, arrayUnion as _arrayUnion, clearIndexedDbPersistence as _clearIndexedDbPersistence, collection as _collection, collectionGroup as _collectionGroup, connectFirestoreEmulator as _connectFirestoreEmulator, deleteDoc as _deleteDoc, deleteField as _deleteField, disableNetwork as _disableNetwork, doc as _doc, documentId as _documentId, enableIndexedDbPersistence as _enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence as _enableMultiTabIndexedDbPersistence, enableNetwork as _enableNetwork, endAt as _endAt, endBefore as _endBefore, getDoc as _getDoc, getDocFromCache as _getDocFromCache, getDocFromServer as _getDocFromServer, getDocs as _getDocs, getDocsFromCache as _getDocsFromCache, getDocsFromServer as _getDocsFromServer, getFirestore as _getFirestore, increment as _increment, initializeFirestore as _initializeFirestore, limit as _limit, limitToLast as _limitToLast, loadBundle as _loadBundle, namedQuery as _namedQuery, onSnapshot as _onSnapshot, onSnapshotsInSync as _onSnapshotsInSync, orderBy as _orderBy, query as _query, queryEqual as _queryEqual, refEqual as _refEqual, runTransaction as _runTransaction, serverTimestamp as _serverTimestamp, setDoc as _setDoc, setLogLevel as _setLogLevel, snapshotEqual as _snapshotEqual, startAfter as _startAfter, startAt as _startAt, terminate as _terminate, updateDoc as _updateDoc, waitForPendingWrites as _waitForPendingWrites, where as _where, writeBatch as _writeBatch } from 'firebase/firestore';
export const addDoc = ɵzoneWrap(_addDoc, true);
export const arrayRemove = ɵzoneWrap(_arrayRemove, true);
export const arrayUnion = ɵzoneWrap(_arrayUnion, true);
export const clearIndexedDbPersistence = ɵzoneWrap(_clearIndexedDbPersistence, true);
export const collection = ɵzoneWrap(_collection, true);
export const collectionGroup = ɵzoneWrap(_collectionGroup, true);
export const connectFirestoreEmulator = ɵzoneWrap(_connectFirestoreEmulator, true);
export const deleteDoc = ɵzoneWrap(_deleteDoc, true);
export const deleteField = ɵzoneWrap(_deleteField, true);
export const disableNetwork = ɵzoneWrap(_disableNetwork, true);
export const doc = ɵzoneWrap(_doc, true);
export const documentId = ɵzoneWrap(_documentId, true);
export const enableIndexedDbPersistence = ɵzoneWrap(_enableIndexedDbPersistence, true);
export const enableMultiTabIndexedDbPersistence = ɵzoneWrap(_enableMultiTabIndexedDbPersistence, true);
export const enableNetwork = ɵzoneWrap(_enableNetwork, true);
export const endAt = ɵzoneWrap(_endAt, true);
export const endBefore = ɵzoneWrap(_endBefore, true);
export const getDoc = ɵzoneWrap(_getDoc, true);
export const getDocFromCache = ɵzoneWrap(_getDocFromCache, true);
export const getDocFromServer = ɵzoneWrap(_getDocFromServer, true);
export const getDocs = ɵzoneWrap(_getDocs, true);
export const getDocsFromCache = ɵzoneWrap(_getDocsFromCache, true);
export const getDocsFromServer = ɵzoneWrap(_getDocsFromServer, true);
export const getFirestore = ɵzoneWrap(_getFirestore, true);
export const increment = ɵzoneWrap(_increment, true);
export const initializeFirestore = ɵzoneWrap(_initializeFirestore, true);
export const limit = ɵzoneWrap(_limit, true);
export const limitToLast = ɵzoneWrap(_limitToLast, true);
export const loadBundle = ɵzoneWrap(_loadBundle, true);
export const namedQuery = ɵzoneWrap(_namedQuery, true);
export const onSnapshot = ɵzoneWrap(_onSnapshot, true);
export const onSnapshotsInSync = ɵzoneWrap(_onSnapshotsInSync, true);
export const orderBy = ɵzoneWrap(_orderBy, true);
export const query = ɵzoneWrap(_query, true);
export const queryEqual = ɵzoneWrap(_queryEqual, true);
export const refEqual = ɵzoneWrap(_refEqual, true);
export const runTransaction = ɵzoneWrap(_runTransaction, true);
export const serverTimestamp = ɵzoneWrap(_serverTimestamp, true);
export const setDoc = ɵzoneWrap(_setDoc, true);
export const setLogLevel = ɵzoneWrap(_setLogLevel, true);
export const snapshotEqual = ɵzoneWrap(_snapshotEqual, true);
export const startAfter = ɵzoneWrap(_startAfter, true);
export const startAt = ɵzoneWrap(_startAt, true);
export const terminate = ɵzoneWrap(_terminate, true);
export const updateDoc = ɵzoneWrap(_updateDoc, true);
export const waitForPendingWrites = ɵzoneWrap(_waitForPendingWrites, true);
export const where = ɵzoneWrap(_where, true);
export const writeBatch = ɵzoneWrap(_writeBatch, true);
//# sourceMappingURL=data:application/json;base64,