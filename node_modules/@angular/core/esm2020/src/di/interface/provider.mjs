/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
export function isEnvironmentProviders(value) {
    return value && !!value.Éµproviders;
}
//# sourceMappingURL=data:application/json;base64,