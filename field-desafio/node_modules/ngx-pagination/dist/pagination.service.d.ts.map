{"version":3,"file":"pagination.service.d.ts","sources":["pagination.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter } from '@angular/core';\r\nimport { PaginationInstance } from './pagination-instance';\r\nexport declare class PaginationService {\r\n    change: EventEmitter<string>;\r\n    private instances;\r\n    private DEFAULT_ID;\r\n    defaultId(): string;\r\n    /**\r\n     * Register a PaginationInstance with this service. Returns a\r\n     * boolean value signifying whether the instance is new or\r\n     * updated (true = new or updated, false = unchanged).\r\n     */\r\n    register(instance: PaginationInstance): boolean;\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    private updateInstance;\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    getCurrentPage(id: string): number;\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    setCurrentPage(id: string, page: number): void;\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    setTotalItems(id: string, totalItems: number): void;\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    setItemsPerPage(id: string, itemsPerPage: number): void;\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    getInstance(id?: string): PaginationInstance;\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    private clone;\r\n}\r\n"]}