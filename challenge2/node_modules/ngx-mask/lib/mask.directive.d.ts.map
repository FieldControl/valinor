{"version":3,"file":"mask.directive.d.ts","sources":["mask.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ControlValueAccessor, FormControl, ValidationErrors, Validator } from '@angular/forms';\nimport { OnChanges, SimpleChanges } from '@angular/core';\nimport { CustomKeyboardEvent } from './custom-keyboard-event';\nimport { IConfig } from './config';\nimport { MaskService } from './mask.service';\nexport declare class MaskDirective implements ControlValueAccessor, OnChanges, Validator {\n    private document;\n    private _maskService;\n    protected _config: IConfig;\n    maskExpression: string;\n    specialCharacters: IConfig['specialCharacters'];\n    patterns: IConfig['patterns'];\n    prefix: IConfig['prefix'];\n    suffix: IConfig['suffix'];\n    thousandSeparator: IConfig['thousandSeparator'];\n    decimalMarker: IConfig['decimalMarker'];\n    dropSpecialCharacters: IConfig['dropSpecialCharacters'] | null;\n    hiddenInput: IConfig['hiddenInput'] | null;\n    showMaskTyped: IConfig['showMaskTyped'] | null;\n    placeHolderCharacter: IConfig['placeHolderCharacter'] | null;\n    shownMaskExpression: IConfig['shownMaskExpression'] | null;\n    showTemplate: IConfig['showTemplate'] | null;\n    clearIfNotMatch: IConfig['clearIfNotMatch'] | null;\n    validation: IConfig['validation'] | null;\n    separatorLimit: IConfig['separatorLimit'] | null;\n    allowNegativeNumbers: IConfig['allowNegativeNumbers'] | null;\n    leadZeroDateTime: IConfig['leadZeroDateTime'] | null;\n    private _maskValue;\n    private _inputValue;\n    private _position;\n    private _start;\n    private _end;\n    private _code;\n    private _maskExpressionArray;\n    private _justPasted;\n    constructor(document: any, _maskService: MaskService, _config: IConfig);\n    onChange: (_: any) => void;\n    onTouch: () => void;\n    ngOnChanges(changes: SimpleChanges): void;\n    validate({ value }: FormControl): ValidationErrors | null;\n    onPaste(): void;\n    onInput(e: CustomKeyboardEvent): void;\n    onBlur(): void;\n    onFocus(e: MouseEvent | CustomKeyboardEvent): void;\n    onKeyDown(e: CustomKeyboardEvent): void;\n    /** It writes the value in the input */\n    writeValue(inputValue: string | number | {\n        value: string | number;\n        disable?: boolean;\n    }): Promise<void>;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    suffixCheckOnPressDelete(keyCode: number, el: HTMLInputElement): void;\n    /** It disables the input element */\n    setDisabledState(isDisabled: boolean): void;\n    private _repeatPatternSymbols;\n    private _applyMask;\n    private _validateTime;\n    private _getActualInputLength;\n    private _createValidationError;\n    private _setMask;\n}\n"]}