{"version":3,"file":"mask.service.d.ts","sources":["mask.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, Renderer2 } from '@angular/core';\nimport { IConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\nexport declare class MaskService extends MaskApplierService {\n    private document;\n    protected _config: IConfig;\n    private _elementRef;\n    private _renderer;\n    maskExpression: string;\n    isNumberValue: boolean;\n    placeHolderCharacter: string;\n    maskIsShown: string;\n    selStart: number | null;\n    selEnd: number | null;\n    /**\n     * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n     * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n     */\n    writingValue: boolean;\n    maskChanged: boolean;\n    onChange: (_: any) => void;\n    constructor(document: any, _config: IConfig, _elementRef: ElementRef, _renderer: Renderer2);\n    applyMask(inputValue: string, maskExpression: string, position?: number, justPasted?: boolean, backspaced?: boolean, cb?: Function): string;\n    private _numberSkipedSymbols;\n    applyValueChanges(position: number | undefined, justPasted: boolean, backspaced: boolean, cb?: Function): void;\n    hideInput(inputValue: string, maskExpression: string): string;\n    getActualValue(res: string): string;\n    shiftTypedSymbols(inputValue: string): string;\n    showMaskInInput(inputVal?: string): string;\n    clearIfNotMatchFn(): void;\n    set formElementProperty([name, value]: [string, string | boolean]);\n    checkSpecialCharAmount(mask: string): number;\n    removeMask(inputValue: string): string;\n    private _checkForIp;\n    private _checkForCpfCnpj;\n    /**\n     * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n     * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n     * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n     * model value too. Therefore, we don't trigger onChange in this scenario.\n     * @param inputValue the current form input value\n     */\n    private formControlResult;\n    private _toNumber;\n    private _removeMask;\n    private _removePrefix;\n    private _removeSuffix;\n    private _retrieveSeparatorValue;\n    private _regExpForRemove;\n    private _checkSymbols;\n    private _retrieveSeparatorPrecision;\n    private _checkPrecision;\n}\n"]}