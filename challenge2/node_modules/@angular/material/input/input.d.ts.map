{"version":3,"file":"input.d.ts","sources":["input.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { AutofillMonitor } from '@angular/cdk/text-field';\nimport { AfterViewInit, DoCheck, ElementRef, NgZone, OnChanges, OnDestroy } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { CanUpdateErrorState, CanUpdateErrorStateCtor, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n/** @docs-private */\ndeclare class MatInputBase {\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    _parentForm: NgForm;\n    _parentFormGroup: FormGroupDirective;\n    /** @docs-private */\n    ngControl: NgControl;\n    constructor(_defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, \n    /** @docs-private */\n    ngControl: NgControl);\n}\ndeclare const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase;\n/** Directive that allows a native input to work inside a `MatFormField`. */\nexport declare class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges, OnDestroy, AfterViewInit, DoCheck, CanUpdateErrorState {\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>;\n    protected _platform: Platform;\n    /** @docs-private */\n    ngControl: NgControl;\n    private _autofillMonitor;\n    private _formField?;\n    protected _uid: string;\n    protected _previousNativeValue: any;\n    private _inputValueAccessor;\n    private _previousPlaceholder;\n    /** Whether the component is being rendered on the server. */\n    readonly _isServer: boolean;\n    /** Whether the component is a native html select. */\n    readonly _isNativeSelect: boolean;\n    /** Whether the component is a textarea. */\n    readonly _isTextarea: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void>;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    controlType: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    autofilled: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    protected _disabled: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id(): string;\n    set id(value: string);\n    protected _id: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    placeholder: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required(): boolean;\n    set required(value: boolean);\n    protected _required: boolean;\n    /** Input type of the element. */\n    get type(): string;\n    set type(value: string);\n    protected _type: string;\n    /** An object used to control when error messages are shown. */\n    errorStateMatcher: ErrorStateMatcher;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    userAriaDescribedBy: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value(): string;\n    set value(value: string);\n    /** Whether the element is readonly. */\n    get readonly(): boolean;\n    set readonly(value: boolean);\n    private _readonly;\n    protected _neverEmptyInputTypes: string[];\n    constructor(_elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>, _platform: Platform, \n    /** @docs-private */\n    ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _defaultErrorStateMatcher: ErrorStateMatcher, inputValueAccessor: any, _autofillMonitor: AutofillMonitor, ngZone: NgZone, _formField?: MatFormField | undefined);\n    ngAfterViewInit(): void;\n    ngOnChanges(): void;\n    ngOnDestroy(): void;\n    ngDoCheck(): void;\n    /** Focuses the input. */\n    focus(options?: FocusOptions): void;\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean): void;\n    _onInput(): void;\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    private _dirtyCheckPlaceholder;\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue(): void;\n    /** Make sure the input is a supported type. */\n    protected _validateType(): void;\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty(): boolean;\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput(): boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids: string[]): void;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(): void;\n    static ngAcceptInputType_disabled: BooleanInput;\n    static ngAcceptInputType_readonly: BooleanInput;\n    static ngAcceptInputType_required: BooleanInput;\n    static ngAcceptInputType_value: any;\n}\nexport {};\n"]}