{"version":3,"file":"sidenav__testing.js","sources":["../../../../../../src/material/sidenav/testing/drawer-harness.ts","../../../../../../src/material/sidenav/testing/drawer-content-harness.ts","../../../../../../src/material/sidenav/testing/drawer-container-harness.ts","../../../../../../src/material/sidenav/testing/drawer-harness-filters.ts","../../../../../../src/material/sidenav/testing/sidenav-content-harness.ts","../../../../../../src/material/sidenav/testing/sidenav-harness.ts","../../../../../../src/material/sidenav/testing/sidenav-container-harness.ts","../../../../../../src/material/sidenav/testing/public-api.ts","../../../../../../src/material/sidenav/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ContentContainerComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {DrawerHarnessFilters} from './drawer-harness-filters';\n\n/**\n * Base class for the drawer harness functionality.\n * @docs-private\n */\nexport class MatDrawerHarnessBase extends ContentContainerComponentHarness<string> {\n  /** Whether the drawer is open. */\n  async isOpen(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-drawer-opened');\n  }\n\n  /** Gets the position of the drawer inside its container. */\n  async getPosition(): Promise<'start'|'end'> {\n    const host = await this.host();\n    return (await host.hasClass('mat-drawer-end')) ? 'end' : 'start';\n  }\n\n  /** Gets the mode that the drawer is in. */\n  async getMode(): Promise<'over'|'push'|'side'> {\n    const host = await this.host();\n\n    if (await host.hasClass('mat-drawer-push')) {\n      return 'push';\n    }\n\n    if (await host.hasClass('mat-drawer-side')) {\n      return 'side';\n    }\n\n    return 'over';\n  }\n}\n\n/** Harness for interacting with a standard mat-drawer in tests. */\nexport class MatDrawerHarness extends MatDrawerHarnessBase {\n  /** The selector for the host element of a `MatDrawer` instance. */\n  static hostSelector = '.mat-drawer';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatDrawerHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which drawer instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: DrawerHarnessFilters = {}): HarnessPredicate<MatDrawerHarness> {\n    return new HarnessPredicate(MatDrawerHarness, options)\n        .addOption('position', options.position,\n            async (harness, position) => (await harness.getPosition()) === position);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ContentContainerComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {DrawerContentHarnessFilters} from './drawer-harness-filters';\n\n/** Harness for interacting with a standard mat-drawer-content in tests. */\nexport class MatDrawerContentHarness extends ContentContainerComponentHarness<string> {\n  /** The selector for the host element of a `MatDrawerContent` instance. */\n  static hostSelector = '.mat-drawer-content';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatDrawerContentHarness` that\n   * meets certain criteria.\n   * @param options Options for filtering which drawer content instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: DrawerContentHarnessFilters = {}):\n    HarnessPredicate<MatDrawerContentHarness> {\n    return new HarnessPredicate(MatDrawerContentHarness, options);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ContentContainerComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {DrawerContainerHarnessFilters, DrawerHarnessFilters} from './drawer-harness-filters';\nimport {MatDrawerContentHarness} from './drawer-content-harness';\nimport {MatDrawerHarness} from './drawer-harness';\n\n/** Harness for interacting with a standard mat-drawer-container in tests. */\nexport class MatDrawerContainerHarness extends ContentContainerComponentHarness<string> {\n  /** The selector for the host element of a `MatDrawerContainer` instance. */\n  static hostSelector = '.mat-drawer-container';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatDrawerContainerHarness` that\n   * meets certain criteria.\n   * @param options Options for filtering which container instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: DrawerContainerHarnessFilters = {}):\n    HarnessPredicate<MatDrawerContainerHarness> {\n    return new HarnessPredicate(MatDrawerContainerHarness, options);\n  }\n\n  /**\n   * Gets drawers that match particular criteria within the container.\n   * @param filter Optionally filters which chips are included.\n   */\n  async getDrawers(filter: DrawerHarnessFilters = {}): Promise<MatDrawerHarness[]> {\n    return this.locatorForAll(MatDrawerHarness.with(filter))();\n  }\n\n  /** Gets the element that has the container's content. */\n  async getContent(): Promise<MatDrawerContentHarness> {\n    return this.locatorFor(MatDrawerContentHarness)();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseHarnessFilters} from '@angular/cdk/testing';\n\n/** A set of criteria that can be used to filter a list of `MatDrawerHarness` instances. */\nexport interface DrawerHarnessFilters extends BaseHarnessFilters {\n  /** Only find instances whose side is the given value. */\n  position?: 'start' | 'end';\n}\n\n/** A set of criteria that can be used to filter a list of `MatDrawerContainerHarness` instances. */\nexport interface DrawerContainerHarnessFilters extends BaseHarnessFilters {}\n\n/** A set of criteria that can be used to filter a list of `MatDrawerContentHarness` instances. */\nexport interface DrawerContentHarnessFilters extends BaseHarnessFilters {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ContentContainerComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {DrawerContentHarnessFilters} from './drawer-harness-filters';\n\n/** Harness for interacting with a standard mat-sidenav-content in tests. */\nexport class MatSidenavContentHarness extends ContentContainerComponentHarness<string> {\n  /** The selector for the host element of a `MatSidenavContent` instance. */\n  static hostSelector = '.mat-sidenav-content';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatSidenavContentHarness` that\n   * meets certain criteria.\n   * @param options Options for filtering which sidenav content instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: DrawerContentHarnessFilters = {}):\n    HarnessPredicate<MatSidenavContentHarness> {\n    return new HarnessPredicate(MatSidenavContentHarness, options);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {MatDrawerHarnessBase} from './drawer-harness';\nimport {DrawerHarnessFilters} from './drawer-harness-filters';\n\n/** Harness for interacting with a standard mat-sidenav in tests. */\nexport class MatSidenavHarness extends MatDrawerHarnessBase {\n  /** The selector for the host element of a `MatSidenav` instance. */\n  static hostSelector = '.mat-sidenav';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatSidenavHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which sidenav instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: DrawerHarnessFilters = {}): HarnessPredicate<MatSidenavHarness> {\n    return new HarnessPredicate(MatSidenavHarness, options)\n        .addOption('position', options.position,\n            async (harness, position) => (await harness.getPosition()) === position);\n  }\n\n  /** Whether the sidenav is fixed in the viewport. */\n  async isFixedInViewport(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-sidenav-fixed');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ContentContainerComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {DrawerContainerHarnessFilters, DrawerHarnessFilters} from './drawer-harness-filters';\nimport {MatSidenavContentHarness} from './sidenav-content-harness';\nimport {MatSidenavHarness} from './sidenav-harness';\n\n/** Harness for interacting with a standard mat-sidenav-container in tests. */\nexport class MatSidenavContainerHarness extends ContentContainerComponentHarness<string> {\n  /** The selector for the host element of a `MatSidenavContainer` instance. */\n  static hostSelector = '.mat-sidenav-container';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatSidenavContainerHarness` that\n   * meets certain criteria.\n   * @param options Options for filtering which container instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: DrawerContainerHarnessFilters = {}):\n    HarnessPredicate<MatSidenavContainerHarness> {\n    return new HarnessPredicate(MatSidenavContainerHarness, options);\n  }\n\n  /**\n   * Gets sidenavs that match particular criteria within the container.\n   * @param filter Optionally filters which chips are included.\n   */\n  async getSidenavs(filter: DrawerHarnessFilters = {}): Promise<MatSidenavHarness[]> {\n    return this.locatorForAll(MatSidenavHarness.with(filter))();\n  }\n\n  /** Gets the element that has the container's content. */\n  async getContent(): Promise<MatSidenavContentHarness> {\n    return this.locatorFor(MatSidenavContentHarness)();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {MatDrawerHarness} from './drawer-harness';\nexport * from './drawer-container-harness';\nexport * from './drawer-content-harness';\nexport * from './drawer-harness-filters';\nexport * from './sidenav-container-harness';\nexport * from './sidenav-content-harness';\nexport * from './sidenav-harness';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}