{"version":3,"file":"tabs__testing.js","sources":["../../../../../../src/material/tabs/testing/tab-harness.ts","../../../../../../src/material/tabs/testing/tab-group-harness.ts","../../../../../../src/material/tabs/testing/tab-link-harness.ts","../../../../../../src/material/tabs/testing/tab-nav-bar-harness.ts","../../../../../../src/material/tabs/testing/public-api.ts","../../../../../../src/material/tabs/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ContentContainerComponentHarness,\n  HarnessLoader,\n  HarnessPredicate,\n} from '@angular/cdk/testing';\nimport {TabHarnessFilters} from './tab-harness-filters';\n\n/** Harness for interacting with a standard Angular Material tab-label in tests. */\nexport class MatTabHarness extends ContentContainerComponentHarness<string> {\n  /** The selector for the host element of a `MatTab` instance. */\n  static hostSelector = '.mat-tab-label';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatTabHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which tab instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: TabHarnessFilters = {}): HarnessPredicate<MatTabHarness> {\n    return new HarnessPredicate(MatTabHarness, options)\n        .addOption('label', options.label,\n            (harness, label) => HarnessPredicate.stringMatches(harness.getLabel(), label));\n  }\n\n  /** Gets the label of the tab. */\n  async getLabel(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Gets the aria-label of the tab. */\n  async getAriaLabel(): Promise<string|null> {\n    return (await this.host()).getAttribute('aria-label');\n  }\n\n  /** Gets the value of the \"aria-labelledby\" attribute. */\n  async getAriaLabelledby(): Promise<string|null> {\n    return (await this.host()).getAttribute('aria-labelledby');\n  }\n\n  /** Whether the tab is selected. */\n  async isSelected(): Promise<boolean> {\n    const hostEl = await this.host();\n    return (await hostEl.getAttribute('aria-selected')) === 'true';\n  }\n\n  /** Whether the tab is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const hostEl = await this.host();\n    return (await hostEl.getAttribute('aria-disabled')) === 'true';\n  }\n\n  /** Selects the given tab by clicking on the label. Tab cannot be selected if disabled. */\n  async select(): Promise<void> {\n    await (await this.host()).click();\n  }\n\n  /** Gets the text content of the tab. */\n  async getTextContent(): Promise<string> {\n    const contentId = await this._getContentId();\n    const contentEl = await this.documentRootLocatorFactory().locatorFor(`#${contentId}`)();\n    return contentEl.text();\n  }\n\n  /**\n   * Gets a `HarnessLoader` that can be used to load harnesses for components within the tab's\n   * content area.\n   * @deprecated Use `getHarness` or `getChildLoader` instead.\n   * @breaking-change 12.0.0\n   */\n  async getHarnessLoaderForContent(): Promise<HarnessLoader> {\n    return this.getRootHarnessLoader();\n  }\n\n  protected async getRootHarnessLoader(): Promise<HarnessLoader> {\n    const contentId = await this._getContentId();\n    return this.documentRootLocatorFactory().harnessLoaderFor(`#${contentId}`);\n  }\n\n  /** Gets the element id for the content of the current tab. */\n  private async _getContentId(): Promise<string> {\n    const hostEl = await this.host();\n    // Tabs never have an empty \"aria-controls\" attribute.\n    return (await hostEl.getAttribute('aria-controls'))!;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate, parallel} from '@angular/cdk/testing';\nimport {TabGroupHarnessFilters, TabHarnessFilters} from './tab-harness-filters';\nimport {MatTabHarness} from './tab-harness';\n\n/** Harness for interacting with a standard mat-tab-group in tests. */\nexport class MatTabGroupHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatTabGroup` instance. */\n  static hostSelector = '.mat-tab-group';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatTabGroupHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which tab group instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: TabGroupHarnessFilters = {}): HarnessPredicate<MatTabGroupHarness> {\n    return new HarnessPredicate(MatTabGroupHarness, options)\n        .addOption('selectedTabLabel', options.selectedTabLabel, async (harness, label) => {\n          const selectedTab = await harness.getSelectedTab();\n          return HarnessPredicate.stringMatches(await selectedTab.getLabel(), label);\n        });\n  }\n\n  /**\n   * Gets the list of tabs in the tab group.\n   * @param filter Optionally filters which tabs are included.\n   */\n  async getTabs(filter: TabHarnessFilters = {}): Promise<MatTabHarness[]> {\n    return this.locatorForAll(MatTabHarness.with(filter))();\n  }\n\n  /** Gets the selected tab of the tab group. */\n  async getSelectedTab(): Promise<MatTabHarness> {\n    const tabs = await this.getTabs();\n    const isSelected = await parallel(() => tabs.map(t => t.isSelected()));\n    for (let i = 0; i < tabs.length; i++) {\n      if (isSelected[i]) {\n        return tabs[i];\n      }\n    }\n    throw new Error('No selected tab could be found.');\n  }\n\n  /**\n   * Selects a tab in this tab group.\n   * @param filter An optional filter to apply to the child tabs. The first tab matching the filter\n   *     will be selected.\n   */\n  async selectTab(filter: TabHarnessFilters = {}): Promise<void> {\n    const tabs = await this.getTabs(filter);\n    if (!tabs.length) {\n      throw Error(`Cannot find mat-tab matching filter ${JSON.stringify(filter)}`);\n    }\n    await tabs[0].select();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {TabLinkHarnessFilters} from './tab-harness-filters';\n\n/** Harness for interacting with a standard Angular Material tab link in tests. */\nexport class MatTabLinkHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatTabLink` instance. */\n  static hostSelector = '.mat-tab-link';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatTabLinkHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which tab link instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: TabLinkHarnessFilters = {}): HarnessPredicate<MatTabLinkHarness> {\n    return new HarnessPredicate(MatTabLinkHarness, options)\n        .addOption('label', options.label,\n            (harness, label) => HarnessPredicate.stringMatches(harness.getLabel(), label));\n  }\n\n  /** Gets the label of the link. */\n  async getLabel(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Whether the link is active. */\n  async isActive(): Promise<boolean> {\n    const host = await this.host();\n    return host.hasClass('mat-tab-label-active');\n  }\n\n  /** Whether the link is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const host = await this.host();\n    return host.hasClass('mat-tab-disabled');\n  }\n\n  /** Clicks on the link. */\n  async click(): Promise<void> {\n    await (await this.host()).click();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate, parallel} from '@angular/cdk/testing';\nimport {TabNavBarHarnessFilters, TabLinkHarnessFilters} from './tab-harness-filters';\nimport {MatTabLinkHarness} from './tab-link-harness';\n\n/** Harness for interacting with a standard mat-tab-nav-bar in tests. */\nexport class MatTabNavBarHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatTabNavBar` instance. */\n  static hostSelector = '.mat-tab-nav-bar';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatTabNavBar` that meets\n   * certain criteria.\n   * @param options Options for filtering which tab nav bar instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: TabNavBarHarnessFilters = {}): HarnessPredicate<MatTabNavBarHarness> {\n    return new HarnessPredicate(MatTabNavBarHarness, options);\n  }\n\n  /**\n   * Gets the list of links in the nav bar.\n   * @param filter Optionally filters which links are included.\n   */\n  async getLinks(filter: TabLinkHarnessFilters = {}): Promise<MatTabLinkHarness[]> {\n    return this.locatorForAll(MatTabLinkHarness.with(filter))();\n  }\n\n  /** Gets the active link in the nav bar. */\n  async getActiveLink(): Promise<MatTabLinkHarness> {\n    const links = await this.getLinks();\n    const isActive = await parallel(() => links.map(t => t.isActive()));\n    for (let i = 0; i < links.length; i++) {\n      if (isActive[i]) {\n        return links[i];\n      }\n    }\n    throw new Error('No active link could be found.');\n  }\n\n  /**\n   * Clicks a link inside the nav bar.\n   * @param filter An optional filter to apply to the child link. The first link matching the filter\n   *     will be clicked.\n   */\n  async clickLink(filter: TabLinkHarnessFilters = {}): Promise<void> {\n    const tabs = await this.getLinks(filter);\n    if (!tabs.length) {\n      throw Error(`Cannot find mat-tab-link matching filter ${JSON.stringify(filter)}`);\n    }\n    await tabs[0].click();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './tab-group-harness';\nexport * from './tab-harness';\nexport * from './tab-harness-filters';\nexport * from './tab-nav-bar-harness';\nexport * from './tab-link-harness';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;AAAA;;;;;;;AAeA;MACa,aAAc,SAAQ,gCAAwC;;;;;;;IAUzE,OAAO,IAAI,CAAC,UAA6B,EAAE;QACzC,OAAO,IAAI,gBAAgB,CAAC,aAAa,EAAE,OAAO,CAAC;aAC9C,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,EAC7B,CAAC,OAAO,EAAE,KAAK,KAAK,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;KACxF;;IAGK,QAAQ;;YACZ,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC;SACnC;KAAA;;IAGK,YAAY;;YAChB,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,YAAY,CAAC,YAAY,CAAC,CAAC;SACvD;KAAA;;IAGK,iBAAiB;;YACrB,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,YAAY,CAAC,iBAAiB,CAAC,CAAC;SAC5D;KAAA;;IAGK,UAAU;;YACd,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YACjC,OAAO,CAAC,MAAM,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,MAAM,MAAM,CAAC;SAChE;KAAA;;IAGK,UAAU;;YACd,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YACjC,OAAO,CAAC,MAAM,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,MAAM,MAAM,CAAC;SAChE;KAAA;;IAGK,MAAM;;YACV,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC;SACnC;KAAA;;IAGK,cAAc;;YAClB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;YAC7C,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC,UAAU,CAAC,IAAI,SAAS,EAAE,CAAC,EAAE,CAAC;YACxF,OAAO,SAAS,CAAC,IAAI,EAAE,CAAC;SACzB;KAAA;;;;;;;IAQK,0BAA0B;;YAC9B,OAAO,IAAI,CAAC,oBAAoB,EAAE,CAAC;SACpC;KAAA;IAEe,oBAAoB;;YAClC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;YAC7C,OAAO,IAAI,CAAC,0BAA0B,EAAE,CAAC,gBAAgB,CAAC,IAAI,SAAS,EAAE,CAAC,CAAC;SAC5E;KAAA;;IAGa,aAAa;;YACzB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;;YAEjC,QAAQ,MAAM,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,EAAG;SACtD;KAAA;;AA1ED;AACO,0BAAY,GAAG,gBAAgB;;AClBxC;;;;;;;AAYA;MACa,kBAAmB,SAAQ,gBAAgB;;;;;;;IAUtD,OAAO,IAAI,CAAC,UAAkC,EAAE;QAC9C,OAAO,IAAI,gBAAgB,CAAC,kBAAkB,EAAE,OAAO,CAAC;aACnD,SAAS,CAAC,kBAAkB,EAAE,OAAO,CAAC,gBAAgB,EAAE,CAAO,OAAO,EAAE,KAAK;YAC5E,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,cAAc,EAAE,CAAC;YACnD,OAAO,gBAAgB,CAAC,aAAa,CAAC,MAAM,WAAW,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC;SAC5E,CAAA,CAAC,CAAC;KACR;;;;;IAMK,OAAO,CAAC,SAA4B,EAAE;;YAC1C,OAAO,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;SACzD;KAAA;;IAGK,cAAc;;YAClB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;YAClC,MAAM,UAAU,GAAG,MAAM,QAAQ,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YACvE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACpC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE;oBACjB,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;iBAChB;aACF;YACD,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;SACpD;KAAA;;;;;;IAOK,SAAS,CAAC,SAA4B,EAAE;;YAC5C,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACxC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBAChB,MAAM,KAAK,CAAC,uCAAuC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;aAC9E;YACD,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;SACxB;KAAA;;AAhDD;AACO,+BAAY,GAAG,gBAAgB;;ACfxC;;;;;;;AAWA;MACa,iBAAkB,SAAQ,gBAAgB;;;;;;;IAUrD,OAAO,IAAI,CAAC,UAAiC,EAAE;QAC7C,OAAO,IAAI,gBAAgB,CAAC,iBAAiB,EAAE,OAAO,CAAC;aAClD,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,EAC7B,CAAC,OAAO,EAAE,KAAK,KAAK,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;KACxF;;IAGK,QAAQ;;YACZ,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC;SACnC;KAAA;;IAGK,QAAQ;;YACZ,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAC/B,OAAO,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC;SAC9C;KAAA;;IAGK,UAAU;;YACd,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAC/B,OAAO,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;SAC1C;KAAA;;IAGK,KAAK;;YACT,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC;SACnC;KAAA;;AAnCD;AACO,8BAAY,GAAG,eAAe;;ACdvC;;;;;;;AAYA;MACa,mBAAoB,SAAQ,gBAAgB;;;;;;;IAUvD,OAAO,IAAI,CAAC,UAAmC,EAAE;QAC/C,OAAO,IAAI,gBAAgB,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;KAC3D;;;;;IAMK,QAAQ,CAAC,SAAgC,EAAE;;YAC/C,OAAO,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;SAC7D;KAAA;;IAGK,aAAa;;YACjB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YACpC,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YACpE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACrC,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE;oBACf,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;iBACjB;aACF;YACD,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;SACnD;KAAA;;;;;;IAOK,SAAS,CAAC,SAAgC,EAAE;;YAChD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACzC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBAChB,MAAM,KAAK,CAAC,4CAA4C,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;aACnF;YACD,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;SACvB;KAAA;;AA5CD;AACO,gCAAY,GAAG,kBAAkB;;ACf1C;;;;;;;;ACAA;;;;;;;;;;"}