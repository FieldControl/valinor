{"version":3,"file":"select__testing.js","sources":["../../../../../../src/material/select/testing/select-harness.ts","../../../../../../src/material/select/testing/select-harness-filters.ts","../../../../../../src/material/select/testing/public-api.ts","../../../../../../src/material/select/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  HarnessPredicate,\n  parallel,\n  ComponentHarness,\n  BaseHarnessFilters,\n  ComponentHarnessConstructor,\n} from '@angular/cdk/testing';\nimport {MatFormFieldControlHarness} from '@angular/material/form-field/testing/control';\nimport {\n  MatOptionHarness,\n  MatOptgroupHarness,\n  OptionHarnessFilters,\n  OptgroupHarnessFilters,\n} from '@angular/material/core/testing';\nimport {SelectHarnessFilters} from './select-harness-filters';\n\nexport abstract class _MatSelectHarnessBase<\n    OptionType extends (ComponentHarnessConstructor<Option> & {\n      with: (options?: OptionFilters) => HarnessPredicate<Option>}),\n    Option extends ComponentHarness & {click(): Promise<void>},\n    OptionFilters extends BaseHarnessFilters,\n    OptionGroupType extends (ComponentHarnessConstructor<OptionGroup> & {\n      with: (options?: OptionGroupFilters) => HarnessPredicate<OptionGroup>}),\n    OptionGroup extends ComponentHarness,\n    OptionGroupFilters extends BaseHarnessFilters\n> extends MatFormFieldControlHarness {\n  protected abstract _prefix: string;\n  protected abstract _optionClass: OptionType;\n  protected abstract _optionGroupClass: OptionGroupType;\n  private _documentRootLocator = this.documentRootLocatorFactory();\n  private _backdrop = this._documentRootLocator.locatorFor('.cdk-overlay-backdrop');\n\n  /** Gets a boolean promise indicating if the select is disabled. */\n  async isDisabled(): Promise<boolean> {\n    return (await this.host()).hasClass(`${this._prefix}-select-disabled`);\n  }\n\n  /** Gets a boolean promise indicating if the select is valid. */\n  async isValid(): Promise<boolean> {\n    return !(await (await this.host()).hasClass('ng-invalid'));\n  }\n\n  /** Gets a boolean promise indicating if the select is required. */\n  async isRequired(): Promise<boolean> {\n    return (await this.host()).hasClass(`${this._prefix}-select-required`);\n  }\n\n  /** Gets a boolean promise indicating if the select is empty (no value is selected). */\n  async isEmpty(): Promise<boolean> {\n    return (await this.host()).hasClass(`${this._prefix}-select-empty`);\n  }\n\n  /** Gets a boolean promise indicating if the select is in multi-selection mode. */\n  async isMultiple(): Promise<boolean> {\n    return (await this.host()).hasClass(`${this._prefix}-select-multiple`);\n  }\n\n  /** Gets a promise for the select's value text. */\n  async getValueText(): Promise<string> {\n    const value = await this.locatorFor(`.${this._prefix}-select-value`)();\n    return value.text();\n  }\n\n  /** Focuses the select and returns a void promise that indicates when the action is complete. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the select and returns a void promise that indicates when the action is complete. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Whether the select is focused. */\n  async isFocused(): Promise<boolean> {\n    return (await this.host()).isFocused();\n  }\n\n  /** Gets the options inside the select panel. */\n  async getOptions(filter?: Omit<OptionFilters, 'ancestor'>): Promise<Option[]> {\n    return this._documentRootLocator.locatorForAll(this._optionClass.with({\n      ...(filter || {}),\n      ancestor: await this._getPanelSelector()\n    } as OptionFilters))();\n  }\n\n  /** Gets the groups of options inside the panel. */\n  async getOptionGroups(filter?: Omit<OptionGroupFilters, 'ancestor'>): Promise<OptionGroup[]> {\n    return this._documentRootLocator.locatorForAll(this._optionGroupClass.with({\n      ...(filter || {}),\n      ancestor: await this._getPanelSelector()\n    } as OptionGroupFilters))() as Promise<OptionGroup[]>;\n  }\n\n  /** Gets whether the select is open. */\n  async isOpen(): Promise<boolean> {\n    return !!await this._documentRootLocator.locatorForOptional(await this._getPanelSelector())();\n  }\n\n  /** Opens the select's panel. */\n  async open(): Promise<void> {\n    if (!await this.isOpen()) {\n      const trigger = await this.locatorFor(`.${this._prefix}-select-trigger`)();\n      return trigger.click();\n    }\n  }\n\n  /**\n   * Clicks the options that match the passed-in filter. If the select is in multi-selection\n   * mode all options will be clicked, otherwise the harness will pick the first matching option.\n   */\n  async clickOptions(filter?: OptionFilters): Promise<void> {\n    await this.open();\n\n    const [isMultiple, options] =\n      await parallel(() => [this.isMultiple(), this.getOptions(filter)]);\n\n    if (options.length === 0) {\n      throw Error('Select does not have options matching the specified filter');\n    }\n\n    if (isMultiple) {\n      await parallel(() => options.map(option => option.click()));\n    } else {\n      await options[0].click();\n    }\n  }\n\n  /** Closes the select's panel. */\n  async close(): Promise<void> {\n    if (await this.isOpen()) {\n      // This is the most consistent way that works both in both single and multi-select modes,\n      // but it assumes that only one overlay is open at a time. We should be able to make it\n      // a bit more precise after #16645 where we can dispatch an ESCAPE press to the host instead.\n      return (await this._backdrop()).click();\n    }\n  }\n\n  /** Gets the selector that should be used to find this select's panel. */\n  private async _getPanelSelector(): Promise<string> {\n    const id = await (await this.host()).getAttribute('id');\n    return `#${id}-panel`;\n  }\n}\n\n/** Harness for interacting with a standard mat-select in tests. */\nexport class MatSelectHarness extends  _MatSelectHarnessBase<\n  typeof MatOptionHarness, MatOptionHarness, OptionHarnessFilters,\n  typeof MatOptgroupHarness, MatOptgroupHarness, OptgroupHarnessFilters\n> {\n  static hostSelector = '.mat-select';\n  protected _prefix = 'mat';\n  protected _optionClass = MatOptionHarness;\n  protected _optionGroupClass = MatOptgroupHarness;\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatSelectHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which select instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: SelectHarnessFilters = {}): HarnessPredicate<MatSelectHarness> {\n    return new HarnessPredicate(MatSelectHarness, options);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseHarnessFilters} from '@angular/cdk/testing';\n\n/** A set of criteria that can be used to filter a list of `MatSelectHarness` instances. */\nexport interface SelectHarnessFilters extends BaseHarnessFilters {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './select-harness';\nexport * from './select-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}