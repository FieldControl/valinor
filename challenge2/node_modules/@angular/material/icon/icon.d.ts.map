{"version":3,"file":"icon.d.ts","sources":["icon.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { AfterViewChecked, ElementRef, ErrorHandler, InjectionToken, OnDestroy, OnInit } from '@angular/core';\nimport { CanColor, CanColorCtor } from '@angular/material/core';\nimport { MatIconRegistry } from './icon-registry';\n/** @docs-private */\ndeclare class MatIconBase {\n    _elementRef: ElementRef;\n    constructor(_elementRef: ElementRef);\n}\ndeclare const _MatIconMixinBase: CanColorCtor & typeof MatIconBase;\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport declare const MAT_ICON_LOCATION: InjectionToken<MatIconLocation>;\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n    getPathname: () => string;\n}\n/** @docs-private */\nexport declare function MAT_ICON_LOCATION_FACTORY(): MatIconLocation;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nexport declare class MatIcon extends _MatIconMixinBase implements OnInit, AfterViewChecked, CanColor, OnDestroy {\n    private _iconRegistry;\n    private _location;\n    private readonly _errorHandler;\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline(): boolean;\n    set inline(inline: boolean);\n    private _inline;\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon(): string;\n    set svgIcon(value: string);\n    private _svgIcon;\n    /** Font set that the icon is a part of. */\n    get fontSet(): string;\n    set fontSet(value: string);\n    private _fontSet;\n    /** Name of an icon within a font set. */\n    get fontIcon(): string;\n    set fontIcon(value: string);\n    private _fontIcon;\n    private _previousFontSetClass;\n    private _previousFontIconClass;\n    _svgName: string | null;\n    _svgNamespace: string | null;\n    /** Keeps track of the current page path. */\n    private _previousPath?;\n    /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n    private _elementsWithExternalReferences?;\n    /** Subscription to the current in-progress SVG icon request. */\n    private _currentIconFetch;\n    constructor(elementRef: ElementRef<HTMLElement>, _iconRegistry: MatIconRegistry, ariaHidden: string, _location: MatIconLocation, _errorHandler: ErrorHandler);\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    private _splitIconName;\n    ngOnInit(): void;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    _usingFontIcon(): boolean;\n    private _setSvgElement;\n    private _clearSvgElement;\n    private _updateFontIconClasses;\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    private _cleanupFontValue;\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    private _prependPathToReferences;\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    private _cacheChildrenWithExternalReferences;\n    /** Sets a new SVG icon with a particular name. */\n    private _updateSvgIcon;\n    static ngAcceptInputType_inline: BooleanInput;\n}\nexport {};\n"]}