{"version":3,"file":"paginator.js","sources":["../../../../../../src/material/paginator/paginator-intl.ts","../../../../../../src/material/paginator/paginator.ts","../../../../../../src/material/paginator/paginator-module.ts","../../../../../../src/material/paginator/public-api.ts","../../../../../../src/material/paginator/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel: (page: number, pageSize: number, length: number) => string =\n    (page: number, pageSize: number, length: number) => {\n      if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n      length = Math.max(length, 0);\n\n      const startIndex = page * pageSize;\n\n      // If the start index exceeds the list length, do not try and fix the end index to the end.\n      const endIndex = startIndex < length ?\n          Math.min(startIndex + pageSize, length) :\n          startIndex + pageSize;\n\n      return `${startIndex + 1} – ${endIndex} of ${length}`;\n    }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  coerceNumberProperty,\n  coerceBooleanProperty,\n  BooleanInput,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n  Directive,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\nimport {MatFormFieldAppearance} from '@angular/material/form-field';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n\n/** Object that can be used to configure the default options for the paginator module. */\nexport interface MatPaginatorDefaultOptions {\n  /** Number of items to display on a page. By default set to 50. */\n  pageSize?: number;\n\n  /** The set of provided page size options to display to the user. */\n  pageSizeOptions?: number[];\n\n  /** Whether to hide the page size selection UI from the user. */\n  hidePageSize?: boolean;\n\n  /** Whether to show the first/last buttons UI to the user. */\n  showFirstLastButtons?: boolean;\n\n  /** The default form-field appearance to apply to the page size options selector. */\n  formFieldAppearance?: MatFormFieldAppearance;\n}\n\n/** Injection token that can be used to provide the default options for the paginator module. */\nexport const MAT_PAGINATOR_DEFAULT_OPTIONS =\n    new InjectionToken<MatPaginatorDefaultOptions>('MAT_PAGINATOR_DEFAULT_OPTIONS');\n\n// Boilerplate for applying mixins to _MatPaginatorBase.\n/** @docs-private */\nclass MatPaginatorMixinBase {}\nconst _MatPaginatorMixinBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorMixinBase =\n    mixinDisabled(mixinInitialized(MatPaginatorMixinBase));\n\n/**\n * Base class with all of the `MatPaginator` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatPaginatorBase<O extends {\n  pageSize?: number;\n  pageSizeOptions?: number[];\n  hidePageSize?: boolean;\n  showFirstLastButtons?: boolean;\n}> extends _MatPaginatorMixinBase implements OnInit, OnDestroy,\n    CanDisable, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef,\n              defaults?: O) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n\n    if (defaults) {\n      const {\n        pageSize,\n        pageSizeOptions,\n        hidePageSize,\n        showFirstLastButtons,\n      } = defaults;\n\n      if (pageSize != null) {\n        this._pageSize = pageSize;\n      }\n\n      if (pageSizeOptions != null) {\n        this._pageSizeOptions = pageSizeOptions;\n      }\n\n      if (hidePageSize != null) {\n        this._hidePageSize = hidePageSize;\n      }\n\n      if (showFirstLastButtons != null) {\n        this._showFirstLastButtons = showFirstLastButtons;\n      }\n    }\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n\n  static ngAcceptInputType_pageIndex: NumberInput;\n  static ngAcceptInputType_length: NumberInput;\n  static ngAcceptInputType_pageSize: NumberInput;\n  static ngAcceptInputType_hidePageSize: BooleanInput;\n  static ngAcceptInputType_showFirstLastButtons: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n    'role': 'group',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase<MatPaginatorDefaultOptions> {\n  /** If set, styles the \"page size\" form field with the designated style. */\n  _formFieldAppearance?: MatFormFieldAppearance;\n\n  constructor(intl: MatPaginatorIntl,\n    changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_PAGINATOR_DEFAULT_OPTIONS) defaults?: MatPaginatorDefaultOptions) {\n    super(intl, changeDetectorRef, defaults);\n\n    if (defaults && defaults.formFieldAppearance != null) {\n      this._formFieldAppearance = defaults.formFieldAppearance;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n    MatCommonModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './paginator-module';\nexport * from './paginator';\nexport * from './paginator-intl';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}