{"version":3,"file":"table.js","sources":["../../../../../../src/material/table/table.ts","../../../../../../src/material/table/cell.ts","../../../../../../src/material/table/row.ts","../../../../../../src/material/table/text-column.ts","../../../../../../src/material/table/table-module.ts","../../../../../../src/material/table/table-data-source.ts","../../../../../../src/material/table/public-api.ts","../../../../../../src/material/table/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TABLE_TEMPLATE,\n  CdkTable,\n  CDK_TABLE,\n  _CoalescedStyleScheduler, _COALESCED_STYLE_SCHEDULER, STICKY_POSITIONING_LISTENER\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  _DisposeViewRepeaterStrategy,\n  _RecycleViewRepeaterStrategy,\n  _VIEW_REPEATER_STRATEGY\n} from '@angular/cdk/collections';\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\n@Directive({\n  selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n  providers: [\n    {provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy},\n  ],\n})\nexport class MatRecycleRows {}\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n    '[class.mat-table-fixed-layout]': 'fixedLayout',\n  },\n  providers: [\n    // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n    //  is only included in the build if used.\n    {provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy},\n    {provide: CdkTable, useExisting: MatTable},\n    {provide: CDK_TABLE, useExisting: MatTable},\n    {provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler},\n    // Prevent nested tables from seeing this table's StickyPositioningListener.\n    {provide: STICKY_POSITIONING_LISTENER, useValue: null},\n  ],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n  protected needsPositionStickyOnElement = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {Directive, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  inputs: ['sticky'],\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef')\n  get name(): string { return this._name; }\n  set name(name: string) { this._setNameInput(name); }\n\n  /**\n   * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n   * In the future, this will only add \"mat-column-\" and columnCssClassName\n   * will change from type string[] to string.\n   * @docs-private\n   */\n  protected _updateColumnCssClassName() {\n    super._updateColumnCssClassName();\n    this._columnCssClassName!.push(`mat-column-${this.cssClassFriendlyName}`);\n  }\n\n  static ngAcceptInputType_sticky: BooleanInput;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n  CdkNoDataRow\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  static ngAcceptInputType_sticky: BooleanInput;\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  static ngAcceptInputType_sticky: BooleanInput;\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n\n/** Row that can be used to display a message when no data is shown in the table. */\n@Directive({\n  selector: 'ng-template[matNoDataRow]',\n  providers: [{provide: CdkNoDataRow, useExisting: MatNoDataRow}],\n})\nexport class MatNoDataRow extends CdkNoDataRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatRecycleRows, MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef,\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef,\n  MatNoDataRow\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n  MatRecycleRows,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n  MatNoDataRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    MatCommonModule,\n  ],\n  exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subject,\n  Subscription,\n} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Interface that matches the required API parts for the MatPaginator's PageEvent.\n * Decoupled so that users can depend on either the legacy or MDC-based paginator.\n */\nexport interface MatTableDataSourcePageEvent {\n  pageIndex: number;\n  pageSize: number;\n  length: number;\n}\n\n/**\n * Interface that matches the required API parts of the MatPaginator.\n * Decoupled so that users can depend on either the legacy or MDC-based paginator.\n */\nexport interface MatTableDataSourcePaginator {\n  page: Subject<MatTableDataSourcePageEvent>;\n  pageIndex: number;\n  initialized: Observable<void>;\n  pageSize: number;\n  length: number;\n}\n\n/** Shared base class with MDC-based implementation. */\nexport class _MatTableDataSource<T,\n    P extends MatTableDataSourcePaginator = MatTableDataSourcePaginator>\n    extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription|null = null;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) {\n    this._data.next(data);\n    // Normally the `filteredData` is updated by the re-render\n    // subscription, but that won't happen if it's inactive.\n    if (!this._renderChangesSubscription) {\n      this._filterData(data);\n    }\n  }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) {\n    this._filter.next(filter);\n    // Normally the `filteredData` is updated by the re-render\n    // subscription, but that won't happen if it's inactive.\n    if (!this._renderChangesSubscription) {\n      this._filterData(this.data);\n    }\n  }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): P | null { return this._paginator; }\n  set paginator(paginator: P | null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: P | null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If there are data in the column that can be converted to a number,\n      // it must be ensured that the rest of the data\n      // is of the same type so as not to order incorrectly.\n      const valueAType = typeof valueA;\n      const valueBType = typeof valueB;\n\n      if (valueAType !== valueBType) {\n        if (valueAType === 'number') { valueA += ''; }\n        if (valueBType === 'number') { valueB += ''; }\n      }\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come last.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<MatTableDataSourcePageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<MatTableDataSourcePageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest([dataStream, this._filter])\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest([filteredData, sortChange])\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest([orderedData, pageChange])\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData = (this.filter == null || this.filter === '') ? data :\n        data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() {\n    if (!this._renderChangesSubscription) {\n      this._updateChangeSubscription();\n    }\n\n    return this._renderData;\n  }\n\n  /**\n   * Used by the MatTable. Called when it disconnects from the data source.\n   * @docs-private\n   */\n  disconnect() {\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = null;\n  }\n}\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nexport class MatTableDataSource<T> extends _MatTableDataSource<T, MatPaginator> {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './table-module';\nexport * from './cell';\nexport * from './table';\nexport * from './row';\nexport * from './table-data-source';\nexport * from './text-column';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}