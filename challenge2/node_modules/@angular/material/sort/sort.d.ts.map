{"version":3,"file":"sort.d.ts","sources":["sort.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { EventEmitter, InjectionToken, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { CanDisable, CanDisableCtor, HasInitialized, HasInitializedCtor } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { SortDirection } from './sort-direction';\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n    /** The id of the column being sorted. */\n    id: string;\n    /** Starting sort direction. */\n    start: 'asc' | 'desc';\n    /** Whether to disable clearing the sorting state. */\n    disableClear: boolean;\n}\n/** The current sort state. */\nexport interface Sort {\n    /** The id of the column being sorted. */\n    active: string;\n    /** The sort direction. */\n    direction: SortDirection;\n}\n/** Default options for `mat-sort`.  */\nexport interface MatSortDefaultOptions {\n    /** Whether to disable clearing the sorting state. */\n    disableClear?: boolean;\n}\n/** Injection token to be used to override the default options for `mat-sort`. */\nexport declare const MAT_SORT_DEFAULT_OPTIONS: InjectionToken<MatSortDefaultOptions>;\n/** @docs-private */\ndeclare class MatSortBase {\n}\ndeclare const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase;\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\nexport declare class MatSort extends _MatSortMixinBase implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n    private _defaultOptions?;\n    /** Collection of all registered sortables that this directive manages. */\n    sortables: Map<string, MatSortable>;\n    /** Used to notify any child components listening to state changes. */\n    readonly _stateChanges: Subject<void>;\n    /** The id of the most recently sorted MatSortable. */\n    active: string;\n    /**\n     * The direction to set when an MatSortable is initially sorted.\n     * May be overriden by the MatSortable's sort start.\n     */\n    start: 'asc' | 'desc';\n    /** The sort direction of the currently active MatSortable. */\n    get direction(): SortDirection;\n    set direction(direction: SortDirection);\n    private _direction;\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     */\n    get disableClear(): boolean;\n    set disableClear(v: boolean);\n    private _disableClear;\n    /** Event emitted when the user changes either the active sort or sort direction. */\n    readonly sortChange: EventEmitter<Sort>;\n    constructor(_defaultOptions?: MatSortDefaultOptions | undefined);\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     */\n    register(sortable: MatSortable): void;\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     */\n    deregister(sortable: MatSortable): void;\n    /** Sets the active sort id and determines the new sort direction. */\n    sort(sortable: MatSortable): void;\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n    getNextSortDirection(sortable: MatSortable): SortDirection;\n    ngOnInit(): void;\n    ngOnChanges(): void;\n    ngOnDestroy(): void;\n    static ngAcceptInputType_disableClear: BooleanInput;\n    static ngAcceptInputType_disabled: BooleanInput;\n}\nexport {};\n"]}