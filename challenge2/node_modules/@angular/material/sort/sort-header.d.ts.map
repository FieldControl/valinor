{"version":3,"file":"sort-header.d.ts","sources":["sort-header.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { ChangeDetectorRef, OnDestroy, OnInit, ElementRef, AfterViewInit } from '@angular/core';\nimport { CanDisable, CanDisableCtor } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { MatSort, MatSortable } from './sort';\nimport { SortDirection } from './sort-direction';\nimport { MatSortHeaderIntl } from './sort-header-intl';\n/** @docs-private */\ndeclare class MatSortHeaderBase {\n}\ndeclare const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase;\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport declare type ArrowViewState = SortDirection | 'hint' | 'active';\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n    fromState?: ArrowViewState;\n    toState?: ArrowViewState;\n}\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n    name: string;\n}\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nexport declare class MatSortHeader extends _MatSortHeaderMixinBase implements CanDisable, MatSortable, OnDestroy, OnInit, AfterViewInit {\n    /**\n     * @deprecated `_intl` parameter isn't being used anymore and it'll be removed.\n     * @breaking-change 13.0.0\n     */\n    _intl: MatSortHeaderIntl;\n    private _changeDetectorRef;\n    _sort: MatSort;\n    _columnDef: MatSortHeaderColumnDef;\n    private _focusMonitor;\n    private _elementRef;\n    private _rerenderSubscription;\n    /**\n     * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n     * provide an affordance that the header is sortable by showing on focus and hover.\n     */\n    _showIndicatorHint: boolean;\n    /**\n     * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n     * position through the animation. If animations are currently disabled, the fromState is removed\n     * so that there is no animation displayed.\n     */\n    _viewState: ArrowViewStateTransition;\n    /** The direction the arrow should be facing according to the current state. */\n    _arrowDirection: SortDirection;\n    /**\n     * Whether the view state animation should show the transition between the `from` and `to` states.\n     */\n    _disableViewStateAnimation: boolean;\n    /**\n     * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n     * the column's name.\n     */\n    id: string;\n    /** Sets the position of the arrow that displays when sorted. */\n    arrowPosition: 'before' | 'after';\n    /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n    start: 'asc' | 'desc';\n    /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n    get disableClear(): boolean;\n    set disableClear(v: boolean);\n    private _disableClear;\n    constructor(\n    /**\n     * @deprecated `_intl` parameter isn't being used anymore and it'll be removed.\n     * @breaking-change 13.0.0\n     */\n    _intl: MatSortHeaderIntl, _changeDetectorRef: ChangeDetectorRef, _sort: MatSort, _columnDef: MatSortHeaderColumnDef, _focusMonitor: FocusMonitor, _elementRef: ElementRef<HTMLElement>);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     */\n    _setIndicatorHintVisible(visible: boolean): void;\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     */\n    _setAnimationTransitionState(viewState: ArrowViewStateTransition): void;\n    /** Triggers the sort on this sort header and removes the indicator hint. */\n    _toggleOnInteraction(): void;\n    _handleClick(): void;\n    _handleKeydown(event: KeyboardEvent): void;\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n    _isSorted(): boolean;\n    /** Returns the animation state for the arrow direction (indicator and pointers). */\n    _getArrowDirectionState(): string;\n    /** Returns the arrow position state (opacity, translation). */\n    _getArrowViewState(): string;\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     */\n    _updateArrowDirection(): void;\n    _isDisabled(): boolean;\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     */\n    _getAriaSortAttribute(): \"none\" | \"ascending\" | \"descending\";\n    /** Whether the arrow inside the sort header should be rendered. */\n    _renderArrow(): boolean;\n    /** Handles changes in the sorting state. */\n    private _handleStateChanges;\n    static ngAcceptInputType_disableClear: BooleanInput;\n    static ngAcceptInputType_disabled: BooleanInput;\n}\nexport {};\n"]}