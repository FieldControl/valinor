{"version":3,"file":"option.d.ts","sources":["option.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { AfterViewChecked, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList } from '@angular/core';\nimport { FocusOptions, FocusableOption, FocusOrigin } from '@angular/cdk/a11y';\nimport { Subject } from 'rxjs';\nimport { MatOptgroup, _MatOptgroupBase } from './optgroup';\nimport { MatOptionParentComponent } from './option-parent';\n/** Event object emitted by MatOption when selected or deselected. */\nexport declare class MatOptionSelectionChange {\n    /** Reference to the option that emitted the event. */\n    source: _MatOptionBase;\n    /** Whether the change in the option's value was a result of a user action. */\n    isUserInput: boolean;\n    constructor(\n    /** Reference to the option that emitted the event. */\n    source: _MatOptionBase, \n    /** Whether the change in the option's value was a result of a user action. */\n    isUserInput?: boolean);\n}\nexport declare class _MatOptionBase implements FocusableOption, AfterViewChecked, OnDestroy {\n    private _element;\n    private _changeDetectorRef;\n    private _parent;\n    readonly group: _MatOptgroupBase;\n    private _selected;\n    private _active;\n    private _disabled;\n    private _mostRecentViewValue;\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple(): boolean | undefined;\n    /** Whether or not the option is currently selected. */\n    get selected(): boolean;\n    /** The form value of the option. */\n    value: any;\n    /** The unique ID of the option. */\n    id: string;\n    /** Whether the option is disabled. */\n    get disabled(): any;\n    set disabled(value: any);\n    /** Whether ripples for the option are disabled. */\n    get disableRipple(): boolean | undefined;\n    /** Event emitted when the option is selected or deselected. */\n    readonly onSelectionChange: EventEmitter<MatOptionSelectionChange>;\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly _stateChanges: Subject<void>;\n    constructor(_element: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, _parent: MatOptionParentComponent, group: _MatOptgroupBase);\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean;\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string;\n    /** Selects the option. */\n    select(): void;\n    /** Deselects the option. */\n    deselect(): void;\n    /** Sets focus onto this option. */\n    focus(_origin?: FocusOrigin, options?: FocusOptions): void;\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void;\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void;\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string;\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event: KeyboardEvent): void;\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction(): void;\n    /**\n     * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n     * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n     * attributes adds a significant amount of noise to screen-reader users without providing useful\n     * information.\n     */\n    _getAriaSelected(): boolean | null;\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    _getTabIndex(): string;\n    /** Gets the host DOM element. */\n    _getHostElement(): HTMLElement;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    /** Emits the selection change event. */\n    private _emitSelectionChangeEvent;\n    static ngAcceptInputType_disabled: BooleanInput;\n}\n/**\n * Single option inside of a `<mat-select>` element.\n */\nexport declare class MatOption extends _MatOptionBase {\n    constructor(element: ElementRef<HTMLElement>, changeDetectorRef: ChangeDetectorRef, parent: MatOptionParentComponent, group: MatOptgroup);\n}\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport declare function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>, optionGroups: QueryList<MatOptgroup>): number;\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Offset of the option from the top of the panel.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport declare function _getOptionScrollPosition(optionOffset: number, optionHeight: number, currentScrollPosition: number, panelHeight: number): number;\n"]}