/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvcmVuZGVyMy9kZXBzX3RyYWNrZXIvYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge1R5cGV9IGZyb20gJy4uLy4uL2ludGVyZmFjZS90eXBlJztcbmltcG9ydCB7TmdNb2R1bGVUeXBlfSBmcm9tICcuLi8uLi9tZXRhZGF0YS9uZ19tb2R1bGVfZGVmJztcbmltcG9ydCB7XG4gIENvbXBvbmVudFR5cGUsXG4gIERlcGVuZGVuY3lUeXBlTGlzdCxcbiAgRGlyZWN0aXZlVHlwZSxcbiAgTmdNb2R1bGVTY29wZUluZm9Gcm9tRGVjb3JhdG9yLFxuICBQaXBlVHlwZSxcbn0gZnJvbSAnLi4vaW50ZXJmYWNlcy9kZWZpbml0aW9uJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBzZXQgb2YgZGVwZW5kZW5jaWVzIG9mIGEgdHlwZSBpbiBhIGNlcnRhaW4gY29udGV4dC5cbiAqL1xuaW50ZXJmYWNlIFNjb3BlRGF0YSB7XG4gIHBpcGVzOiBTZXQ8UGlwZVR5cGU8YW55Pj47XG4gIGRpcmVjdGl2ZXM6IFNldDxEaXJlY3RpdmVUeXBlPGFueT4gfCBDb21wb25lbnRUeXBlPGFueT4gfCBUeXBlPGFueT4+O1xuXG4gIC8qKlxuICAgKiBJZiB0cnVlIGl0IGluZGljYXRlcyB0aGF0IGNhbGN1bGF0aW5nIHRoaXMgc2NvcGUgc29tZWhvdyB3YXMgbm90IHN1Y2Nlc3NmdWwuIFRoZSBjb25zdW1lcnNcbiAgICogc2hvdWxkIGludGVycHJldCB0aGlzIGFzIGVtcHR5IGRlcGVuZGVuY2llcy4gVGhlIGFwcGxpY2F0aW9uIG9mIHRoaXMgZmxhZyBpcyB3aGVuIGNhbGN1bGF0aW5nXG4gICAqIHNjb3BlIHJlY3Vyc2l2ZWx5LCB0aGUgcHJlc2VuY2Ugb2YgdGhpcyBmbGFnIGluIGEgc2NvcGUgZGVwZW5kZW5jeSBpbXBsaWVzIHRoYXQgdGhlIHNjb3BlIGlzXG4gICAqIGFsc28gcG9pc29uZWQgYW5kIHRodXMgd2UgY2FuIHJldHVybiBpbW1lZGlhdGVseSB3aXRob3V0IGhhdmluZyB0byBjb250aW51ZSB0aGUgcmVjdXJzaW9uLiBUaGVcbiAgICogcmVhc29uIGZvciB0aGlzIGVycm9yIGlzIGRpc3BsYXllZCBhcyBhbiBlcnJvciBtZXNzYWdlIGluIHRoZSBjb25zb2xlIGFzIHBlciBKSVQgYmVoYXZpb3JcbiAgICogdG9kYXkuIEluIGFkZGl0aW9uIHRvIHRoYXQsIGluIGxvY2FsIGNvbXBpbGF0aW9uIHRoZSBvdGhlciBidWlsZC9jb21waWxhdGlvbnMgcnVuIGluIHBhcmFsbGVsXG4gICAqIHdpdGggbG9jYWwgY29tcGlsYXRpb24gbWF5IG9yIG1heSBub3QgcmV2ZWFsIHNvbWUgZGV0YWlscyBhYm91dCB0aGUgZXJyb3IgYXMgd2VsbC5cbiAgICovXG4gIGlzUG9pc29uZWQ/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgc2NvcGUgZGF0YSBmb3Igc3RhbmRhbG9uZSBjb21wb25lbnRzIGFzIGNhbGN1bGF0ZWQgZHVyaW5nIHJ1bnRpbWUgYnkgdGhlIGRlcHNcbiAqIHRyYWNrZXIuXG4gKi9cbmludGVyZmFjZSBTdGFuZGFsb25lQ29tcFNjb3BlRGF0YSBleHRlbmRzIFNjb3BlRGF0YSB7XG4gIC8vIFN0YW5kYWxvbmUgY29tcG9uZW50cyBpbmNsdWRlIHRoZSBpbXBvcnRlZCBOZ01vZHVsZXMgaW4gdGhlaXIgZGVwZW5kZW5jaWVzIGluIG9yZGVyIHRvXG4gIC8vIGRldGVybWluZSB0aGVpciBpbmplY3RvciBpbmZvLiBUaGUgZm9sbG93aW5nIGZpZWxkIHN0b3JlcyB0aGUgc2V0IG9mIHN1Y2ggTmdNb2R1bGVzLlxuICBuZ01vZHVsZXM6IFNldDxOZ01vZHVsZVR5cGU8YW55Pj47XG59XG5cbi8qKiBSZXByZXNlbnRzIHNjb3BlIGRhdGEgZm9yIE5nTW9kdWxlIGFzIGNhbGN1bGF0ZWQgZHVyaW5nIHJ1bnRpbWUgYnkgdGhlIGRlcHMgdHJhY2tlci4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmdNb2R1bGVTY29wZSB7XG4gIGNvbXBpbGF0aW9uOiBTY29wZURhdGE7XG4gIGV4cG9ydGVkOiBTY29wZURhdGE7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBzY29wZSBkYXRhIGZvciBzdGFuZGFsb25lIGNvbXBvbmVudCBhcyBjYWxjdWxhdGVkIGR1cmluZyBydW50aW1lIGJ5IHRoZSBkZXBzIHRyYWNrZXIuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3RhbmRhbG9uZUNvbXBvbmVudFNjb3BlIHtcbiAgY29tcGlsYXRpb246IFN0YW5kYWxvbmVDb21wU2NvcGVEYXRhO1xufVxuXG4vKiogQ29tcG9uZW50IGRlcGVuZGVuY2llcyBpbmZvIGFzIGNhbGN1bGF0ZWQgZHVyaW5nIHJ1bnRpbWUgYnkgdGhlIGRlcHMgdHJhY2tlci4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcG9uZW50RGVwZW5kZW5jaWVzIHtcbiAgZGVwZW5kZW5jaWVzOiBEZXBlbmRlbmN5VHlwZUxpc3Q7XG59XG5cbi8qKlxuICogUHVibGljIEFQSSBmb3IgcnVudGltZSBkZXBzIHRyYWNrZXIgKFJEVCkuXG4gKlxuICogQWxsIGRvd25zdHJlYW0gdG9vbHMgc2hvdWxkIG9ubHkgdXNlIHRoZXNlIG1ldGhvZHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVwc1RyYWNrZXJBcGkge1xuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIGNvbXBvbmVudCBkZXBlbmRlbmNpZXMsIGkuZS4sIGEgc2V0IG9mIGNvbXBvbmVudHMvZGlyZWN0aXZlL3BpcGVzIHRoYXQgY291bGQgYmVcbiAgICogcHJlc2VudCBpbiB0aGUgY29tcG9uZW50J3MgdGVtcGxhdGUgKFRoaXMgc2V0IG1pZ2h0IGNvbnRhaW4gZGlyZWN0aXZlcy9jb21wb25lbnRzL3BpcGVzIG5vdFxuICAgKiBuZWNlc3NhcmlseSB1c2VkIGluIHRoZSBjb21wb25lbnQncyB0ZW1wbGF0ZSBkZXBlbmRpbmcgb24gdGhlIGltcGxlbWVudGF0aW9uKS5cbiAgICpcbiAgICogU3RhbmRhbG9uZSBjb21wb25lbnRzIHNob3VsZCBzcGVjaWZ5IGByYXdJbXBvcnRzYCBhcyB0aGlzIGluZm9ybWF0aW9uIGlzIG5vdCBhdmFpbGFibGUgZnJvbVxuICAgKiB0aGVpciB0eXBlLiBUaGUgY29uc3VtZXIgKGUuZy4sIHtAbGluayBnZXRTdGFuZGFsb25lRGVmRnVuY3Rpb25zfSkgaXMgZXhwZWN0ZWQgdG8gcGFzcyB0aGlzXG4gICAqIHBhcmFtZXRlci5cbiAgICpcbiAgICogVGhlIGltcGxlbWVudGF0aW9uIGlzIGV4cGVjdGVkIHRvIHVzZSBzb21lIGNhY2hpbmcgbWVjaGFuaXNtIGluIG9yZGVyIHRvIG9wdGltaXplIHRoZSByZXNvdXJjZXNcbiAgICogbmVlZGVkIHRvIGRvIHRoaXMgY29tcHV0YXRpb24uXG4gICAqL1xuICBnZXRDb21wb25lbnREZXBlbmRlbmNpZXMoXG4gICAgY21wOiBDb21wb25lbnRUeXBlPGFueT4sXG4gICAgcmF3SW1wb3J0cz86IChUeXBlPGFueT4gfCAoKCkgPT4gVHlwZTxhbnk+KSlbXSxcbiAgKTogQ29tcG9uZW50RGVwZW5kZW5jaWVzO1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYW4gTmdNb2R1bGUgaW50byB0aGUgdHJhY2tlciB3aXRoIHRoZSBnaXZlbiBzY29wZSBpbmZvLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGZvciBldmVyeSBOZ01vZHVsZSB3aGV0aGVyIGl0IGlzIGNvbXBpbGVkIGluIGxvY2FsIG1vZGUgb3Igbm90LlxuICAgKiBUaGlzIGlzIG5lZWRlZCBpbiBvcmRlciB0byBjb21wdXRlIGNvbXBvbmVudCdzIGRlcGVuZGVuY2llcyBhcyBzb21lIGRlcGVuZGVuY2llcyBtaWdodCBiZSBpblxuICAgKiBkaWZmZXJlbnQgY29tcGlsYXRpb24gdW5pdHMgd2l0aCBkaWZmZXJlbnQgY29tcGlsYXRpb24gbW9kZS5cbiAgICovXG4gIHJlZ2lzdGVyTmdNb2R1bGUodHlwZTogVHlwZTxhbnk+LCBzY29wZUluZm86IE5nTW9kdWxlU2NvcGVJbmZvRnJvbURlY29yYXRvcik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIENsZWFycyB0aGUgc2NvcGUgY2FjaGUgZm9yIE5nTW9kdWxlIG9yIHN0YW5kYWxvbmUgY29tcG9uZW50LiBUaGlzIHdpbGwgZm9yY2UgcmUtY2FsY3VsYXRpb24gb2ZcbiAgICogdGhlIHNjb3BlLCB3aGljaCBjb3VsZCBiZSBhbiBleHBlbnNpdmUgb3BlcmF0aW9uIGFzIGl0IGludm9sdmVzIGFnZ3JlZ2F0aW5nIHRyYW5zaXRpdmUgY2xvc3VyZS5cbiAgICpcbiAgICogVGhlIG1haW4gYXBwbGljYXRpb24gb2YgdGhpcyBtZXRob2QgaXMgZm9yIHRlc3QgYmVkcyB3aGVyZSB3ZSB3YW50IHRvIGNsZWFyIHRoZSBjYWNoZSB0b1xuICAgKiBlbmZvcmNlIHNjb3BlIHVwZGF0ZSBhZnRlciBvdmVycmlkaW5nLlxuICAgKi9cbiAgY2xlYXJTY29wZUNhY2hlRm9yKHR5cGU6IFR5cGU8YW55Pik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHNjb3BlIG9mIE5nTW9kdWxlLiBNYWlubHkgdG8gYmUgdXNlZCBieSBKSVQgYW5kIHRlc3QgYmVkLlxuICAgKlxuICAgKiBUaGUgc2NvcGUgdmFsdWUgaGVyZSBpcyBtZW1vaXplZC4gVG8gZW5mb3JjZSBhIG5ldyBjYWxjdWxhdGlvbiBidXN0IHRoZSBjYWNoZSBieSB1c2luZ1xuICAgKiBgY2xlYXJTY29wZUNhY2hlRm9yYCBtZXRob2QuXG4gICAqL1xuICBnZXROZ01vZHVsZVNjb3BlKHR5cGU6IE5nTW9kdWxlVHlwZTxhbnk+KTogTmdNb2R1bGVTY29wZTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc2NvcGUgb2Ygc3RhbmRhbG9uZSBjb21wb25lbnQuIE1haW5seSB0byBiZSB1c2VkIGJ5IEpJVC4gVGhpcyBtZXRob2Qgc2hvdWxkIGJlXG4gICAqIGNhbGxlZCBsYXppbHkgYWZ0ZXIgdGhlIGluaXRpYWwgcGFyc2luZyBzbyB0aGF0IGFsbCB0aGUgZm9yd2FyZCByZWZzIGNhbiBiZSByZXNvbHZlZC5cbiAgICpcbiAgICogQHBhcmFtIHJhd0ltcG9ydHMgdGhlIGltcG9ydHMgc3RhdGVtZW50IGFzIGFwcGVhcnMgb24gdGhlIGNvbXBvbmVudCBkZWNvcmF0ZSB3aGljaCBjb25zaXN0cyBvZlxuICAgKiAgICAgVHlwZSBhcyB3ZWxsIGFzIGZvcndhcmQgcmVmcy5cbiAgICpcbiAgICogVGhlIHNjb3BlIHZhbHVlIGhlcmUgaXMgbWVtb2l6ZWQuIFRvIGVuZm9yY2UgYSBuZXcgY2FsY3VsYXRpb24gYnVzdCB0aGUgY2FjaGUgYnkgdXNpbmdcbiAgICogYGNsZWFyU2NvcGVDYWNoZUZvcmAgbWV0aG9kLlxuICAgKi9cbiAgZ2V0U3RhbmRhbG9uZUNvbXBvbmVudFNjb3BlKFxuICAgIHR5cGU6IENvbXBvbmVudFR5cGU8YW55PixcbiAgICByYXdJbXBvcnRzOiAoVHlwZTxhbnk+IHwgKCgpID0+IFR5cGU8YW55PikpW10sXG4gICk6IFN0YW5kYWxvbmVDb21wb25lbnRTY29wZTtcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBOZ01vZHVsZSBkZWNsYXJpbmcgdGhlIGNvbXBvbmVudCBpcyBub3QgbG9hZGVkIGludG8gdGhlIGJyb3dzZXIgeWV0LiBBbHdheXNcbiAgICogcmV0dXJucyBmYWxzZSBmb3Igc3RhbmRhbG9uZSBjb21wb25lbnRzLlxuICAgKi9cbiAgaXNPcnBoYW5Db21wb25lbnQoY21wOiBDb21wb25lbnRUeXBlPGFueT4pOiBib29sZWFuO1xufVxuIl19