/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// tslint:disable:no-duplicate-imports
import { EventContract, EventContractContainer, EventDispatcher, registerDispatcher, } from '@angular/core/primitives/event-dispatch';
import * as Attributes from '@angular/core/primitives/event-dispatch';
import { Injectable } from './di';
import { EVENT_REPLAY_ENABLED_DEFAULT, IS_EVENT_REPLAY_ENABLED } from './hydration/tokens';
import * as i0 from "./r3_symbols";
export function invokeRegisteredListeners(event) {
    const handlerFns = event.currentTarget?.__jsaction_fns?.get(event.type);
    if (!handlerFns) {
        return;
    }
    for (const handler of handlerFns) {
        handler(event);
    }
}
export function setJSActionAttribute(nativeElement, eventTypes) {
    if (!eventTypes.length) {
        return;
    }
    const parts = eventTypes.reduce((prev, curr) => prev + curr + ':;', '');
    const existingAttr = nativeElement.getAttribute(Attributes.JSACTION);
    //  This is required to be a module accessor to appease security tests on setAttribute.
    nativeElement.setAttribute(Attributes.JSACTION, `${existingAttr ?? ''}${parts}`);
}
export const sharedStashFunction = (rEl, eventType, listenerFn) => {
    const el = rEl;
    const eventListenerMap = el.__jsaction_fns ?? new Map();
    const eventListeners = eventListenerMap.get(eventType) ?? [];
    eventListeners.push(listenerFn);
    eventListenerMap.set(eventType, eventListeners);
    el.__jsaction_fns = eventListenerMap;
};
export const removeListeners = (el) => {
    el.removeAttribute(Attributes.JSACTION);
    el.__jsaction_fns = undefined;
};
export class GlobalEventDelegation {
    addEvent(el, eventName) {
        if (this.eventContract) {
            this.eventContract.addEvent(eventName);
            setJSActionAttribute(el, [eventName]);
            return true;
        }
        return false;
    }
    static { this.ɵfac = function GlobalEventDelegation_Factory(t) { return new (t || GlobalEventDelegation)(); }; }
    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: GlobalEventDelegation, factory: GlobalEventDelegation.ɵfac, providedIn: 'root' }); }
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.setClassMetadata(GlobalEventDelegation, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
export const initGlobalEventDelegation = (eventDelegation, injector) => {
    if (injector.get(IS_EVENT_REPLAY_ENABLED, EVENT_REPLAY_ENABLED_DEFAULT)) {
        return;
    }
    eventDelegation.eventContract = new EventContract(new EventContractContainer(document.body));
    const dispatcher = new EventDispatcher(invokeRegisteredListeners);
    registerDispatcher(eventDelegation.eventContract, dispatcher);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRfZGVsZWdhdGlvbl91dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2V2ZW50X2RlbGVnYXRpb25fdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsc0NBQXNDO0FBQ3RDLE9BQU8sRUFDTCxhQUFhLEVBQ2Isc0JBQXNCLEVBQ3RCLGVBQWUsRUFDZixrQkFBa0IsR0FDbkIsTUFBTSx5Q0FBeUMsQ0FBQztBQUNqRCxPQUFPLEtBQUssVUFBVSxNQUFNLHlDQUF5QyxDQUFDO0FBQ3RFLE9BQU8sRUFBQyxVQUFVLEVBQVcsTUFBTSxNQUFNLENBQUM7QUFFMUMsT0FBTyxFQUFDLDRCQUE0QixFQUFFLHVCQUF1QixFQUFDLE1BQU0sb0JBQW9CLENBQUM7O0FBUXpGLE1BQU0sVUFBVSx5QkFBeUIsQ0FBQyxLQUFZO0lBQ3BELE1BQU0sVUFBVSxHQUFJLEtBQUssQ0FBQyxhQUF5QixFQUFFLGNBQWMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JGLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNoQixPQUFPO0lBQ1QsQ0FBQztJQUNELEtBQUssTUFBTSxPQUFPLElBQUksVUFBVSxFQUFFLENBQUM7UUFDakMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pCLENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLG9CQUFvQixDQUFDLGFBQXNCLEVBQUUsVUFBb0I7SUFDL0UsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUN2QixPQUFPO0lBQ1QsQ0FBQztJQUNELE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RSxNQUFNLFlBQVksR0FBRyxhQUFhLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyRSx1RkFBdUY7SUFDdkYsYUFBYSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEdBQUcsWUFBWSxJQUFJLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQ25GLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEdBQWEsRUFBRSxTQUFpQixFQUFFLFVBQXNCLEVBQUUsRUFBRTtJQUM5RixNQUFNLEVBQUUsR0FBRyxHQUF5QixDQUFDO0lBQ3JDLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLGNBQWMsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ3hELE1BQU0sY0FBYyxHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDN0QsY0FBYyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNoQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ2hELEVBQUUsQ0FBQyxjQUFjLEdBQUcsZ0JBQWdCLENBQUM7QUFDdkMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsRUFBVyxFQUFFLEVBQUU7SUFDN0MsRUFBRSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDeEMsRUFBRSxDQUFDLGNBQWMsR0FBRyxTQUFTLENBQUM7QUFDaEMsQ0FBQyxDQUFDO0FBR0YsTUFBTSxPQUFPLHFCQUFxQjtJQUVoQyxRQUFRLENBQUMsRUFBVyxFQUFFLFNBQWlCO1FBQ3JDLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3ZDLG9CQUFvQixDQUFDLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDdEMsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO3NGQVRVLHFCQUFxQjt1RUFBckIscUJBQXFCLFdBQXJCLHFCQUFxQixtQkFEVCxNQUFNOztnRkFDbEIscUJBQXFCO2NBRGpDLFVBQVU7ZUFBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUM7O0FBYWhDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLENBQ3ZDLGVBQXNDLEVBQ3RDLFFBQWtCLEVBQ2xCLEVBQUU7SUFDRixJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEVBQUUsNEJBQTRCLENBQUMsRUFBRSxDQUFDO1FBQ3hFLE9BQU87SUFDVCxDQUFDO0lBQ0QsZUFBZSxDQUFDLGFBQWEsR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzdGLE1BQU0sVUFBVSxHQUFHLElBQUksZUFBZSxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDbEUsa0JBQWtCLENBQUMsZUFBZSxDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNoRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLy8gdHNsaW50OmRpc2FibGU6bm8tZHVwbGljYXRlLWltcG9ydHNcbmltcG9ydCB7XG4gIEV2ZW50Q29udHJhY3QsXG4gIEV2ZW50Q29udHJhY3RDb250YWluZXIsXG4gIEV2ZW50RGlzcGF0Y2hlcixcbiAgcmVnaXN0ZXJEaXNwYXRjaGVyLFxufSBmcm9tICdAYW5ndWxhci9jb3JlL3ByaW1pdGl2ZXMvZXZlbnQtZGlzcGF0Y2gnO1xuaW1wb3J0ICogYXMgQXR0cmlidXRlcyBmcm9tICdAYW5ndWxhci9jb3JlL3ByaW1pdGl2ZXMvZXZlbnQtZGlzcGF0Y2gnO1xuaW1wb3J0IHtJbmplY3RhYmxlLCBJbmplY3Rvcn0gZnJvbSAnLi9kaSc7XG5pbXBvcnQge1JFbGVtZW50fSBmcm9tICcuL3JlbmRlcjMvaW50ZXJmYWNlcy9yZW5kZXJlcl9kb20nO1xuaW1wb3J0IHtFVkVOVF9SRVBMQVlfRU5BQkxFRF9ERUZBVUxULCBJU19FVkVOVF9SRVBMQVlfRU5BQkxFRH0gZnJvbSAnLi9oeWRyYXRpb24vdG9rZW5zJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgRWxlbWVudCB7XG4gICAgX19qc2FjdGlvbl9mbnM6IE1hcDxzdHJpbmcsIEZ1bmN0aW9uW10+IHwgdW5kZWZpbmVkO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZva2VSZWdpc3RlcmVkTGlzdGVuZXJzKGV2ZW50OiBFdmVudCkge1xuICBjb25zdCBoYW5kbGVyRm5zID0gKGV2ZW50LmN1cnJlbnRUYXJnZXQgYXMgRWxlbWVudCk/Ll9fanNhY3Rpb25fZm5zPy5nZXQoZXZlbnQudHlwZSk7XG4gIGlmICghaGFuZGxlckZucykge1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKGNvbnN0IGhhbmRsZXIgb2YgaGFuZGxlckZucykge1xuICAgIGhhbmRsZXIoZXZlbnQpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRKU0FjdGlvbkF0dHJpYnV0ZShuYXRpdmVFbGVtZW50OiBFbGVtZW50LCBldmVudFR5cGVzOiBzdHJpbmdbXSkge1xuICBpZiAoIWV2ZW50VHlwZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHBhcnRzID0gZXZlbnRUeXBlcy5yZWR1Y2UoKHByZXYsIGN1cnIpID0+IHByZXYgKyBjdXJyICsgJzo7JywgJycpO1xuICBjb25zdCBleGlzdGluZ0F0dHIgPSBuYXRpdmVFbGVtZW50LmdldEF0dHJpYnV0ZShBdHRyaWJ1dGVzLkpTQUNUSU9OKTtcbiAgLy8gIFRoaXMgaXMgcmVxdWlyZWQgdG8gYmUgYSBtb2R1bGUgYWNjZXNzb3IgdG8gYXBwZWFzZSBzZWN1cml0eSB0ZXN0cyBvbiBzZXRBdHRyaWJ1dGUuXG4gIG5hdGl2ZUVsZW1lbnQuc2V0QXR0cmlidXRlKEF0dHJpYnV0ZXMuSlNBQ1RJT04sIGAke2V4aXN0aW5nQXR0ciA/PyAnJ30ke3BhcnRzfWApO1xufVxuXG5leHBvcnQgY29uc3Qgc2hhcmVkU3Rhc2hGdW5jdGlvbiA9IChyRWw6IFJFbGVtZW50LCBldmVudFR5cGU6IHN0cmluZywgbGlzdGVuZXJGbjogKCkgPT4gdm9pZCkgPT4ge1xuICBjb25zdCBlbCA9IHJFbCBhcyB1bmtub3duIGFzIEVsZW1lbnQ7XG4gIGNvbnN0IGV2ZW50TGlzdGVuZXJNYXAgPSBlbC5fX2pzYWN0aW9uX2ZucyA/PyBuZXcgTWFwKCk7XG4gIGNvbnN0IGV2ZW50TGlzdGVuZXJzID0gZXZlbnRMaXN0ZW5lck1hcC5nZXQoZXZlbnRUeXBlKSA/PyBbXTtcbiAgZXZlbnRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lckZuKTtcbiAgZXZlbnRMaXN0ZW5lck1hcC5zZXQoZXZlbnRUeXBlLCBldmVudExpc3RlbmVycyk7XG4gIGVsLl9fanNhY3Rpb25fZm5zID0gZXZlbnRMaXN0ZW5lck1hcDtcbn07XG5cbmV4cG9ydCBjb25zdCByZW1vdmVMaXN0ZW5lcnMgPSAoZWw6IEVsZW1lbnQpID0+IHtcbiAgZWwucmVtb3ZlQXR0cmlidXRlKEF0dHJpYnV0ZXMuSlNBQ1RJT04pO1xuICBlbC5fX2pzYWN0aW9uX2ZucyA9IHVuZGVmaW5lZDtcbn07XG5cbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncm9vdCd9KVxuZXhwb3J0IGNsYXNzIEdsb2JhbEV2ZW50RGVsZWdhdGlvbiB7XG4gIGV2ZW50Q29udHJhY3QhOiBFdmVudENvbnRyYWN0O1xuICBhZGRFdmVudChlbDogRWxlbWVudCwgZXZlbnROYW1lOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5ldmVudENvbnRyYWN0KSB7XG4gICAgICB0aGlzLmV2ZW50Q29udHJhY3QuYWRkRXZlbnQoZXZlbnROYW1lKTtcbiAgICAgIHNldEpTQWN0aW9uQXR0cmlidXRlKGVsLCBbZXZlbnROYW1lXSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBpbml0R2xvYmFsRXZlbnREZWxlZ2F0aW9uID0gKFxuICBldmVudERlbGVnYXRpb246IEdsb2JhbEV2ZW50RGVsZWdhdGlvbixcbiAgaW5qZWN0b3I6IEluamVjdG9yLFxuKSA9PiB7XG4gIGlmIChpbmplY3Rvci5nZXQoSVNfRVZFTlRfUkVQTEFZX0VOQUJMRUQsIEVWRU5UX1JFUExBWV9FTkFCTEVEX0RFRkFVTFQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGV2ZW50RGVsZWdhdGlvbi5ldmVudENvbnRyYWN0ID0gbmV3IEV2ZW50Q29udHJhY3QobmV3IEV2ZW50Q29udHJhY3RDb250YWluZXIoZG9jdW1lbnQuYm9keSkpO1xuICBjb25zdCBkaXNwYXRjaGVyID0gbmV3IEV2ZW50RGlzcGF0Y2hlcihpbnZva2VSZWdpc3RlcmVkTGlzdGVuZXJzKTtcbiAgcmVnaXN0ZXJEaXNwYXRjaGVyKGV2ZW50RGVsZWdhdGlvbi5ldmVudENvbnRyYWN0LCBkaXNwYXRjaGVyKTtcbn07XG4iXX0=