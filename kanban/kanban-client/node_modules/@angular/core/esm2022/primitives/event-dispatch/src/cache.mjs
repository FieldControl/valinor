/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { JSACTION } from './property';
/**
 * Map from jsaction annotation to a parsed map from event name to action name.
 */
const parseCache = {};
/**
 * Reads the jsaction parser cache from the given DOM Element.
 *
 * @param element .
 * @return Map from event to qualified name of the jsaction bound to it.
 */
export function get(element) {
    // @ts-ignore
    return element[JSACTION];
}
/**
 * Writes the jsaction parser cache to the given DOM Element.
 *
 * @param element .
 * @param actionMap Map from event to qualified name of the jsaction bound to
 *     it.
 */
export function set(element, actionMap) {
    // @ts-ignore
    element[JSACTION] = actionMap;
}
/**
 * Looks up the parsed action map from the source jsaction attribute value.
 *
 * @param text Unparsed jsaction attribute value.
 * @return Parsed jsaction attribute value, if already present in the cache.
 */
export function getParsed(text) {
    return parseCache[text];
}
/**
 * Inserts the parse result for the given source jsaction value into the cache.
 *
 * @param text Unparsed jsaction attribute value.
 * @param parsed Attribute value parsed into the action map.
 */
export function setParsed(text, parsed) {
    parseCache[text] = parsed;
}
/**
 * Clears the jsaction parser cache from the given DOM Element.
 *
 * @param element .
 */
export function clear(element) {
    if (JSACTION in element) {
        delete element[JSACTION];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3ByaW1pdGl2ZXMvZXZlbnQtZGlzcGF0Y2gvc3JjL2NhY2hlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFFcEM7O0dBRUc7QUFDSCxNQUFNLFVBQVUsR0FBNkMsRUFBRSxDQUFDO0FBRWhFOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLEdBQUcsQ0FBQyxPQUFnQjtJQUNsQyxhQUFhO0lBQ2IsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDM0IsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxHQUFHLENBQUMsT0FBZ0IsRUFBRSxTQUFrQztJQUN0RSxhQUFhO0lBQ2IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsQ0FBQztBQUNoQyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsU0FBUyxDQUFDLElBQVk7SUFDcEMsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBQyxJQUFZLEVBQUUsTUFBK0I7SUFDckUsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQztBQUM1QixDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxLQUFLLENBQUMsT0FBZ0I7SUFDcEMsSUFBSSxRQUFRLElBQUksT0FBTyxFQUFFLENBQUM7UUFDeEIsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDM0IsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtKU0FDVElPTn0gZnJvbSAnLi9wcm9wZXJ0eSc7XG5cbi8qKlxuICogTWFwIGZyb20ganNhY3Rpb24gYW5ub3RhdGlvbiB0byBhIHBhcnNlZCBtYXAgZnJvbSBldmVudCBuYW1lIHRvIGFjdGlvbiBuYW1lLlxuICovXG5jb25zdCBwYXJzZUNhY2hlOiB7W2tleTogc3RyaW5nXToge1trZXk6IHN0cmluZ106IHN0cmluZ319ID0ge307XG5cbi8qKlxuICogUmVhZHMgdGhlIGpzYWN0aW9uIHBhcnNlciBjYWNoZSBmcm9tIHRoZSBnaXZlbiBET00gRWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gZWxlbWVudCAuXG4gKiBAcmV0dXJuIE1hcCBmcm9tIGV2ZW50IHRvIHF1YWxpZmllZCBuYW1lIG9mIHRoZSBqc2FjdGlvbiBib3VuZCB0byBpdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldChlbGVtZW50OiBFbGVtZW50KToge1trZXk6IHN0cmluZ106IHN0cmluZ30ge1xuICAvLyBAdHMtaWdub3JlXG4gIHJldHVybiBlbGVtZW50W0pTQUNUSU9OXTtcbn1cblxuLyoqXG4gKiBXcml0ZXMgdGhlIGpzYWN0aW9uIHBhcnNlciBjYWNoZSB0byB0aGUgZ2l2ZW4gRE9NIEVsZW1lbnQuXG4gKlxuICogQHBhcmFtIGVsZW1lbnQgLlxuICogQHBhcmFtIGFjdGlvbk1hcCBNYXAgZnJvbSBldmVudCB0byBxdWFsaWZpZWQgbmFtZSBvZiB0aGUganNhY3Rpb24gYm91bmQgdG9cbiAqICAgICBpdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldChlbGVtZW50OiBFbGVtZW50LCBhY3Rpb25NYXA6IHtba2V5OiBzdHJpbmddOiBzdHJpbmd9KSB7XG4gIC8vIEB0cy1pZ25vcmVcbiAgZWxlbWVudFtKU0FDVElPTl0gPSBhY3Rpb25NYXA7XG59XG5cbi8qKlxuICogTG9va3MgdXAgdGhlIHBhcnNlZCBhY3Rpb24gbWFwIGZyb20gdGhlIHNvdXJjZSBqc2FjdGlvbiBhdHRyaWJ1dGUgdmFsdWUuXG4gKlxuICogQHBhcmFtIHRleHQgVW5wYXJzZWQganNhY3Rpb24gYXR0cmlidXRlIHZhbHVlLlxuICogQHJldHVybiBQYXJzZWQganNhY3Rpb24gYXR0cmlidXRlIHZhbHVlLCBpZiBhbHJlYWR5IHByZXNlbnQgaW4gdGhlIGNhY2hlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFyc2VkKHRleHQ6IHN0cmluZyk6IHtba2V5OiBzdHJpbmddOiBzdHJpbmd9IHwgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIHBhcnNlQ2FjaGVbdGV4dF07XG59XG5cbi8qKlxuICogSW5zZXJ0cyB0aGUgcGFyc2UgcmVzdWx0IGZvciB0aGUgZ2l2ZW4gc291cmNlIGpzYWN0aW9uIHZhbHVlIGludG8gdGhlIGNhY2hlLlxuICpcbiAqIEBwYXJhbSB0ZXh0IFVucGFyc2VkIGpzYWN0aW9uIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqIEBwYXJhbSBwYXJzZWQgQXR0cmlidXRlIHZhbHVlIHBhcnNlZCBpbnRvIHRoZSBhY3Rpb24gbWFwLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0UGFyc2VkKHRleHQ6IHN0cmluZywgcGFyc2VkOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSkge1xuICBwYXJzZUNhY2hlW3RleHRdID0gcGFyc2VkO1xufVxuXG4vKipcbiAqIENsZWFycyB0aGUganNhY3Rpb24gcGFyc2VyIGNhY2hlIGZyb20gdGhlIGdpdmVuIERPTSBFbGVtZW50LlxuICpcbiAqIEBwYXJhbSBlbGVtZW50IC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyKGVsZW1lbnQ6IEVsZW1lbnQpIHtcbiAgaWYgKEpTQUNUSU9OIGluIGVsZW1lbnQpIHtcbiAgICBkZWxldGUgZWxlbWVudFtKU0FDVElPTl07XG4gIH1cbn1cbiJdfQ==