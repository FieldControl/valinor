/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * The jsaction attribute defines a mapping of a DOM event to a
 * generic event (aka jsaction), to which the actual event handlers
 * that implement the behavior of the application are bound. The
 * value is a semicolon separated list of colon separated pairs of
 * an optional DOM event name and a jsaction name. If the optional
 * DOM event name is omitted, 'click' is assumed. The jsaction names
 * are dot separated pairs of a namespace and a simple jsaction
 * name.
 *
 * See grammar in README.md for expected syntax in the attribute value.
 */
export const JSACTION = 'jsaction';
/**
 * The oi attribute is a log impression tag for impression logging
 * and action tracking. For an element that carries a jsaction
 * attribute, the element is identified for the purpose of
 * impression logging and click tracking by the dot separated path
 * of all oi attributes in the chain of ancestors of the element.
 *
 * Used by ActionFlow.
 */
export const OI = 'oi';
/**
 * The ved attribute is an encoded ClickTrackingCGI proto to track
 * visual elements.
 *
 * Used by ActionFlow.
 */
export const VED = 'ved';
/**
 * The vet attribute is the visual element type used to identify tracked
 * visual elements.
 */
export const VET = 'vet';
/**
 * Support for iteration on reprocessing.
 *
 * Used by ActionFlow.
 */
export const JSINSTANCE = 'jsinstance';
/**
 * All click jsactions that happen on the element that carries this
 * attribute or its descendants are automatically logged.
 * Impressions of jsactions on these elements are tracked too, if
 * requested by the impression() method of ActionFlow.
 *
 * Used by ActionFlow.
 */
export const JSTRACK = 'jstrack';
export const Attribute = { JSACTION, OI, VED, VET, JSINSTANCE, JSTRACK };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cmlidXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9wcmltaXRpdmVzL2V2ZW50LWRpc3BhdGNoL3NyYy9hdHRyaWJ1dGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUg7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDO0FBRW5DOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQztBQUV2Qjs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUM7QUFFekI7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQztBQUV6Qjs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLFlBQVksQ0FBQztBQUV2Qzs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQztBQUVqQyxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsRUFBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8qKlxuICogVGhlIGpzYWN0aW9uIGF0dHJpYnV0ZSBkZWZpbmVzIGEgbWFwcGluZyBvZiBhIERPTSBldmVudCB0byBhXG4gKiBnZW5lcmljIGV2ZW50IChha2EganNhY3Rpb24pLCB0byB3aGljaCB0aGUgYWN0dWFsIGV2ZW50IGhhbmRsZXJzXG4gKiB0aGF0IGltcGxlbWVudCB0aGUgYmVoYXZpb3Igb2YgdGhlIGFwcGxpY2F0aW9uIGFyZSBib3VuZC4gVGhlXG4gKiB2YWx1ZSBpcyBhIHNlbWljb2xvbiBzZXBhcmF0ZWQgbGlzdCBvZiBjb2xvbiBzZXBhcmF0ZWQgcGFpcnMgb2ZcbiAqIGFuIG9wdGlvbmFsIERPTSBldmVudCBuYW1lIGFuZCBhIGpzYWN0aW9uIG5hbWUuIElmIHRoZSBvcHRpb25hbFxuICogRE9NIGV2ZW50IG5hbWUgaXMgb21pdHRlZCwgJ2NsaWNrJyBpcyBhc3N1bWVkLiBUaGUganNhY3Rpb24gbmFtZXNcbiAqIGFyZSBkb3Qgc2VwYXJhdGVkIHBhaXJzIG9mIGEgbmFtZXNwYWNlIGFuZCBhIHNpbXBsZSBqc2FjdGlvblxuICogbmFtZS5cbiAqXG4gKiBTZWUgZ3JhbW1hciBpbiBSRUFETUUubWQgZm9yIGV4cGVjdGVkIHN5bnRheCBpbiB0aGUgYXR0cmlidXRlIHZhbHVlLlxuICovXG5leHBvcnQgY29uc3QgSlNBQ1RJT04gPSAnanNhY3Rpb24nO1xuXG4vKipcbiAqIFRoZSBvaSBhdHRyaWJ1dGUgaXMgYSBsb2cgaW1wcmVzc2lvbiB0YWcgZm9yIGltcHJlc3Npb24gbG9nZ2luZ1xuICogYW5kIGFjdGlvbiB0cmFja2luZy4gRm9yIGFuIGVsZW1lbnQgdGhhdCBjYXJyaWVzIGEganNhY3Rpb25cbiAqIGF0dHJpYnV0ZSwgdGhlIGVsZW1lbnQgaXMgaWRlbnRpZmllZCBmb3IgdGhlIHB1cnBvc2Ugb2ZcbiAqIGltcHJlc3Npb24gbG9nZ2luZyBhbmQgY2xpY2sgdHJhY2tpbmcgYnkgdGhlIGRvdCBzZXBhcmF0ZWQgcGF0aFxuICogb2YgYWxsIG9pIGF0dHJpYnV0ZXMgaW4gdGhlIGNoYWluIG9mIGFuY2VzdG9ycyBvZiB0aGUgZWxlbWVudC5cbiAqXG4gKiBVc2VkIGJ5IEFjdGlvbkZsb3cuXG4gKi9cbmV4cG9ydCBjb25zdCBPSSA9ICdvaSc7XG5cbi8qKlxuICogVGhlIHZlZCBhdHRyaWJ1dGUgaXMgYW4gZW5jb2RlZCBDbGlja1RyYWNraW5nQ0dJIHByb3RvIHRvIHRyYWNrXG4gKiB2aXN1YWwgZWxlbWVudHMuXG4gKlxuICogVXNlZCBieSBBY3Rpb25GbG93LlxuICovXG5leHBvcnQgY29uc3QgVkVEID0gJ3ZlZCc7XG5cbi8qKlxuICogVGhlIHZldCBhdHRyaWJ1dGUgaXMgdGhlIHZpc3VhbCBlbGVtZW50IHR5cGUgdXNlZCB0byBpZGVudGlmeSB0cmFja2VkXG4gKiB2aXN1YWwgZWxlbWVudHMuXG4gKi9cbmV4cG9ydCBjb25zdCBWRVQgPSAndmV0JztcblxuLyoqXG4gKiBTdXBwb3J0IGZvciBpdGVyYXRpb24gb24gcmVwcm9jZXNzaW5nLlxuICpcbiAqIFVzZWQgYnkgQWN0aW9uRmxvdy5cbiAqL1xuZXhwb3J0IGNvbnN0IEpTSU5TVEFOQ0UgPSAnanNpbnN0YW5jZSc7XG5cbi8qKlxuICogQWxsIGNsaWNrIGpzYWN0aW9ucyB0aGF0IGhhcHBlbiBvbiB0aGUgZWxlbWVudCB0aGF0IGNhcnJpZXMgdGhpc1xuICogYXR0cmlidXRlIG9yIGl0cyBkZXNjZW5kYW50cyBhcmUgYXV0b21hdGljYWxseSBsb2dnZWQuXG4gKiBJbXByZXNzaW9ucyBvZiBqc2FjdGlvbnMgb24gdGhlc2UgZWxlbWVudHMgYXJlIHRyYWNrZWQgdG9vLCBpZlxuICogcmVxdWVzdGVkIGJ5IHRoZSBpbXByZXNzaW9uKCkgbWV0aG9kIG9mIEFjdGlvbkZsb3cuXG4gKlxuICogVXNlZCBieSBBY3Rpb25GbG93LlxuICovXG5leHBvcnQgY29uc3QgSlNUUkFDSyA9ICdqc3RyYWNrJztcblxuZXhwb3J0IGNvbnN0IEF0dHJpYnV0ZSA9IHtKU0FDVElPTiwgT0ksIFZFRCwgVkVULCBKU0lOU1RBTkNFLCBKU1RSQUNLfTtcbiJdfQ==