{"version":3,"sources":["../../../src/service/local-storage.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,iBAAA,EAAkB,MAAO,sBAAA,CAAuB;AACzD,OAAO,EAAE,mBAAA,EAAoB,MAAO,YAAA,CAAa;AACjD,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAC7C,OAAO,+BAAA,CAAgC;AACvC,OAAO,uBAAA,CAAwB;AAC/B,OAAO,yBAAA,CAA0B;AAIjC;IAAyC,uCAAiB;IAGtD;QAAA,YACI,kBAAM,mBAAmB,CAAC,SAQ7B;QAPG,KAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,SAAS,CAAkB,MAAM,EAAE,SAAS,CAAC;aACnE,MAAM,CAAC,UAAC,KAAsB,IAAK,OAAA,KAAK,CAAC,WAAW,KAAK,YAAY,EAAlC,CAAkC,CAAC;aACtE,GAAG,CAAC,UAAC,CAAkB;YACpB,IAAI,KAAK,GAAG,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACtF,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC;YACzB,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC,CAAC,CAAC,KAAK,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;;IAC9C,CAAC;IAXa,wBAAI,GAAkB,EAAE,CAAC;IAYpC,8BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,kCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,0BAAC;CAnBD,AAmBC,CAnBwC,iBAAiB,GAmBzD;SAnBY,mBAAmB","file":"local-storage.service.js","sourceRoot":"","sourcesContent":["import { WebStorageService } from './webstorage.service';\nimport { localStorageUtility } from '../utility';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/merge';\nimport { NgxStorageEvent } from '../utility/storage/storage-event';\n\n\nexport class LocalStorageService extends WebStorageService {\n    public static keys: Array<string> = [];\n\n    constructor() {\n        super(localStorageUtility);\n        this._changes = Observable.fromEvent<NgxStorageEvent>(window, 'storage')\n            .filter((event: NgxStorageEvent) => event.storageArea === localStorage)\n            .map((e: NgxStorageEvent) => {\n                let event = this.generateEvent(e.key, JSON.parse(e.newValue), JSON.parse(e.oldValue));\n                event.isInternal = false;\n                return event;\n            }).merge(localStorageUtility.changes);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}