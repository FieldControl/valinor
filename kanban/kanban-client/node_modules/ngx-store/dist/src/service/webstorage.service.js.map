{"version":3,"sources":["../../../src/service/webstorage.service.ts"],"names":[],"mappings":"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","file":"webstorage.service.js","sourceRoot":"","sourcesContent":["import { ClearType, Config } from '../config';\nimport { WebStorageConfigInterface } from '../config';\nimport { WebStorageUtility } from '../utility/webstorage-utility';\nimport { WebStorageServiceInterface } from './webstorage.interface';\nimport { debug } from '../config';\nimport { Cache } from '../decorator/cache';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/delay';\nimport { NgxStorageEvent } from '../utility/storage/storage-event';\nconst merge = require('lodash.merge');\n\nexport abstract class WebStorageService {\n    public static keys: Array<string>;\n    protected _changes: Observable<NgxStorageEvent>;\n\n    public constructor(public utility: WebStorageUtility) { }\n\n    /**\n     * Gets keys for stored variables created by ngx-store,\n     * ignores keys that have not been created by decorators and have no prefix at once\n     * @returns {Array<string>}\n     */\n    public get keys(): Array<string> {\n        // get prefixed key if prefix is defined\n        let prefixKeys = this.utility.keys.filter(key => {\n            return this.utility.prefix && key.startsWith(this.utility.prefix);\n        });\n        let decoratorKeys = (<WebStorageServiceInterface>this.constructor).keys;\n        return prefixKeys.concat(decoratorKeys);\n    }\n\n    public get config(): WebStorageConfigInterface {\n        return Config;\n    }\n\n    public get(key: string): any {\n        return this.utility.get(key);\n    }\n\n    public set<T>(key: string, value: T): T {\n        return this.utility.set(key, value);\n    }\n\n    public update(key: string, changes: any): any {\n        let value = this.get(key);\n        if (typeof value !== 'object') {\n            debug.throw(new Error(`Value stored under \"${key}\" key is not an object and tried to be updated.`));\n            return value;\n        }\n        return this.set(key, merge({}, value, changes));\n    }\n\n    // TODO return true if item existed and false otherwise (?)\n    public remove(key: string): void {\n        return this.utility.remove(key);\n    }\n\n    public observe(key?: string, exactMatch?: boolean) {\n        return this._changes.filter((event: NgxStorageEvent) => {\n            if (!key) { return true; }\n            if (exactMatch) {\n                if (key.startsWith(Config.prefix)) {\n                    return event.key === key;\n                }\n                return event.key === Config.prefix + key;\n            } else {\n                return event.key.indexOf(key) !== -1;\n            }\n        }).delay(30); // event should come after actual data change and propagation\n    }\n\n    /**\n     * Clears chosen data from Storage\n     * @param clearType 'prefix' | 'decorators' | 'all'\n     * @param secondParam defines the prefix or class (not its instance) whose decorators should be cleared\n     */\n    public clear(clearType?: ClearType, secondParam?: string | object): void {\n        clearType = clearType || Config.clearType;\n        if (clearType === 'decorators') {\n            let keys = [];\n            if (typeof secondParam === 'object') {\n                keys = this.keys.filter(key => Cache.get(key).targets.indexOf(secondParam) !== -1);\n                debug.log(this.utility.getStorageName() + ' > Removing decorated data from ' + secondParam.constructor.name + ':', keys);\n            } else {\n                keys = this.keys;\n                debug.log(this.utility.getStorageName() + ' > Removing decorated data:', keys);\n            }\n            keys.forEach(key => this.remove(key));\n        } else if (clearType === 'prefix') {\n            secondParam = secondParam || Config.prefix;\n            this.utility.forEach((value, key) => {\n                if (key.startsWith(<string>secondParam)) {\n                    this.remove(this.utility.trimPrefix(key));\n                }\n            });\n        } else if (clearType === 'all') {\n            this.utility.clear();\n        }\n    }\n\n    protected generateEvent(key: string, newValue: any, oldValue?: any): NgxStorageEvent {\n        let type = this.utility.getStorageName().charAt(0).toLowerCase() + this.utility.getStorageName().slice(1);\n        let event = new NgxStorageEvent(type, key, this.utility.getStorage());\n        event.oldValue = (oldValue !== undefined) ? oldValue : this.get(key);\n        event.newValue = newValue;\n        return event;\n    }\n}\n"]}