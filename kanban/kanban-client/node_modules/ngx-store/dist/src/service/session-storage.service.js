var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { WebStorageService } from './webstorage.service';
import { sessionStorageUtility } from '../utility';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/fromEvent';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/merge';
var SessionStorageService = /** @class */ (function (_super) {
    __extends(SessionStorageService, _super);
    function SessionStorageService() {
        var _this = _super.call(this, sessionStorageUtility) || this;
        _this._changes = Observable.fromEvent(window, 'storage')
            .filter(function (event) { return event.storageArea === sessionStorage; })
            .map(function (e) {
            var event = _this.generateEvent(e.key, JSON.parse(e.newValue), JSON.parse(e.oldValue));
            event.isInternal = false;
            return event;
        }).merge(sessionStorageUtility.changes);
        return _this;
    }
    SessionStorageService.keys = [];
    SessionStorageService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    SessionStorageService.ctorParameters = function () { return []; };
    return SessionStorageService;
}(WebStorageService));
export { SessionStorageService };
//# sourceMappingURL=session-storage.service.js.map