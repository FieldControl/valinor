{"version":3,"sources":["../../../../src/utility/storage/storage.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAClD,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AAGvC,uDAAuD;AACvD;IAAA;QAGW,oBAAe,GAA6B,IAAI,OAAO,EAAE,CAAC;IAgBrE,CAAC;IAPa,8BAAS,GAAnB,UAAoB,GAAW,EAAE,QAAa,EAAE,QAAc;QAC1D,IAAI,KAAK,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QACtD,KAAK,CAAC,QAAQ,GAAG,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACzE,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC1B,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IACL,iBAAC;AAAD,CAnBA,AAmBC,IAAA","file":"storage.js","sourceRoot":"","sourcesContent":["import { NgxStorageEvent } from './storage-event';\nimport { Subject } from 'rxjs/Subject';\nimport { StorageName } from '../webstorage-utility';\n\n// TODO: in the future use ES6 Proxy to handle indexers\nexport abstract class NgxStorage implements Storage {\n    [key: string]: any;\n    [index: number]: string;\n    public externalChanges: Subject<NgxStorageEvent> = new Subject();\n    public abstract setItem(key: string, value: any): void;\n    public abstract removeItem(key: string): void;\n    public abstract getItem(key: string): any;\n    public abstract key(index: number);\n    public abstract clear(): void;\n    public abstract get length(): number;\n    public abstract get type(): StorageName;\n\n    protected emitEvent(key: string, newValue: any, oldValue?: any) {\n        let event = new NgxStorageEvent(this.type, key, this);\n        event.oldValue = (oldValue !== undefined) ? oldValue : this.getItem(key);\n        event.newValue = newValue;\n        event.isInternal = false;\n        this.externalChanges.next(event);\n    }\n}\n"]}