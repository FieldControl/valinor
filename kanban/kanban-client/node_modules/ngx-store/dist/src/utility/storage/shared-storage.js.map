{"version":3,"sources":["../../../../src/utility/storage/shared-storage.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,WAAW,CAAC;AAGvC;IAAmC,iCAAU;IAGzC;QAAA,YACI,iBAAO,SAEV;QALS,eAAS,GAAqB,IAAI,GAAG,EAAE,CAAC;QAI9C,KAAI,CAAC,eAAe,GAAG,SAAS,CAAC;;IACrC,CAAC;IAED,sBAAW,+BAAI;aAAf;YACI,MAAM,CAAC,eAAe,CAAC;QAC3B,CAAC;;;OAAA;IAED,sBAAW,iCAAM;aAAjB;YACI,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC;QACpC,CAAC;;;OAAA;IAEM,2BAAG,GAAV,UAAW,KAAa;QACpB,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAEM,+BAAO,GAAd,UAAe,GAAW;QACtB,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACpC,MAAM,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;IAChD,CAAC;IAEM,kCAAU,GAAjB,UAAkB,GAAW;QACzB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IAEM,+BAAO,GAAd,UAAe,GAAW,EAAE,KAAU;QAClC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACnC,CAAC;IAEM,6BAAK,GAAZ;QACI,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IAC3B,CAAC;IAEM,+BAAO,GAAd,UAAe,IAAsC;QACjD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,GAAG,IAAK,OAAA,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC;IACpE,CAAC;IAES,kCAAU,GAApB;QACI,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;IAC7C,CAAC;IACL,oBAAC;AAAD,CA5CA,AA4CC,CA5CkC,UAAU,GA4C5C;;AAED,MAAM,CAAC,IAAM,aAAa,GAAG,IAAI,aAAa,EAAE,CAAC","file":"shared-storage.js","sourceRoot":"","sourcesContent":["import { NgxStorage } from './storage';\nimport { StorageName } from '../webstorage-utility';\n\nexport class SharedStorage extends NgxStorage {\n    protected sharedMap: Map<string, any> = new Map();\n\n    constructor() {\n        super();\n        this.externalChanges = undefined;\n    }\n\n    public get type(): StorageName {\n        return 'sharedStorage';\n    }\n\n    public get length(): number {\n        return this.getAllKeys().length;\n    }\n\n    public key(index: number): string | any {\n        return this.getAllKeys()[index];\n    }\n\n    public getItem(key: string): any {\n        let value = this.sharedMap.get(key);\n        return (value !== undefined) ? value : null;\n    }\n\n    public removeItem(key: string): void {\n        this.sharedMap.delete(key);\n    }\n\n    public setItem(key: string, value: any): void {\n        this.sharedMap.set(key, value);\n    }\n\n    public clear(): void {\n        this.sharedMap.clear();\n    }\n\n    public forEach(func: (value: string, key: any) => any): void {\n        return this.sharedMap.forEach((value, key) => func(value, key));\n    }\n\n    protected getAllKeys(): Array<string> {\n        return Array.from(this.sharedMap.keys());\n    }\n}\n\nexport const sharedStorage = new SharedStorage();\n"]}