{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/store/migrations/18_0_0-beta/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport {\n  Tree,\n  Rule,\n  chain,\n  SchematicContext,\n} from '@angular-devkit/schematics';\nimport {\n  Change,\n  commitChanges,\n  createReplaceChange,\n  InsertChange,\n  visitTSSourceFiles,\n} from '../../schematics-core';\nimport { createRemoveChange } from '../../schematics-core/utility/change';\n\nconst storeModelsPath = '@ngrx/store/src/models';\nconst filesWithChanges: string[] = [];\n\nexport function migrateStoreTypedAction(): Rule {\n  return (tree: Tree, ctx: SchematicContext) => {\n    visitTSSourceFiles(tree, (sourceFile) => {\n      const changes: Change[] = [];\n\n      const importDeclarations = new Array<ts.ImportDeclaration>();\n      getImportDeclarations(sourceFile, importDeclarations);\n\n      const storeModelsImportsAndDeclaration = importDeclarations\n        .map((storeModelsImportDeclaration) => {\n          const storeModelsImports = getStoreModelsNamedBindings(\n            storeModelsImportDeclaration\n          );\n          if (storeModelsImports) {\n            return { storeModelsImports, storeModelsImportDeclaration };\n          } else {\n            return undefined;\n          }\n        })\n        .find(Boolean);\n\n      if (!storeModelsImportsAndDeclaration) {\n        return;\n      }\n\n      const { storeModelsImports, storeModelsImportDeclaration } =\n        storeModelsImportsAndDeclaration;\n\n      const storeImportDeclaration = importDeclarations.find(\n        (node) =>\n          node.moduleSpecifier.getText().includes('@ngrx/store') &&\n          !node.moduleSpecifier.getText().includes('@ngrx/store/')\n      );\n\n      const otherStoreModelImports = storeModelsImports.elements\n        .filter((element) => element.name.getText() !== 'TypedAction')\n        .map((element) => element.name.getText())\n        .join(', ');\n\n      // Remove `TypedAction` from @ngrx/store/src/models and leave the other imports\n      if (otherStoreModelImports) {\n        changes.push(\n          createReplaceChange(\n            sourceFile,\n            storeModelsImportDeclaration,\n            storeModelsImportDeclaration.getText(),\n            `import { ${otherStoreModelImports} } from '${storeModelsPath}';`\n          )\n        );\n      }\n      // Remove complete import because it's empty\n      else {\n        changes.push(\n          createRemoveChange(\n            sourceFile,\n            storeModelsImportDeclaration,\n            storeModelsImportDeclaration.getStart(),\n            storeModelsImportDeclaration.getEnd() + 1\n          )\n        );\n      }\n\n      let importAppendedInExistingDeclaration = false;\n      if (storeImportDeclaration?.importClause?.namedBindings) {\n        const bindings = storeImportDeclaration.importClause.namedBindings;\n        if (ts.isNamedImports(bindings)) {\n          // Add import to existing @ngrx/operators\n          const updatedImports = new Set([\n            ...bindings.elements.map((element) => element.name.getText()),\n            'Action',\n          ]);\n          const importStatement = `import { ${[...updatedImports].join(\n            ', '\n          )} } from '@ngrx/store';`;\n          changes.push(\n            createReplaceChange(\n              sourceFile,\n              storeImportDeclaration,\n              storeImportDeclaration.getText(),\n              importStatement\n            )\n          );\n          importAppendedInExistingDeclaration = true;\n        }\n      }\n\n      if (!importAppendedInExistingDeclaration) {\n        // Add new @ngrx/operators import line\n        const importStatement = `import { Action } from '@ngrx/store';`;\n        changes.push(\n          new InsertChange(\n            sourceFile.fileName,\n            storeModelsImportDeclaration.getEnd() + 1,\n            `${importStatement}\\n`\n          )\n        );\n      }\n\n      commitChanges(tree, sourceFile.fileName, changes);\n\n      if (changes.length) {\n        filesWithChanges.push(sourceFile.fileName);\n        ctx.logger.info(\n          `[@ngrx/store] ${sourceFile.fileName}: Replaced TypedAction to Action`\n        );\n      }\n    });\n  };\n}\n\nexport function migrateStoreTypedActionReferences(): Rule {\n  return (tree: Tree, _ctx: SchematicContext) => {\n    visitTSSourceFiles(tree, (sourceFile) => {\n      if (!filesWithChanges.includes(sourceFile.fileName)) {\n        return;\n      }\n      const changes: Change[] = [];\n      const typedActionIdentifiers = new Array<ts.Identifier>();\n      getTypedActionUsages(sourceFile, typedActionIdentifiers);\n\n      typedActionIdentifiers.forEach((identifier) => {\n        changes.push(\n          createReplaceChange(\n            sourceFile,\n            identifier,\n            identifier.getText(),\n            'Action'\n          )\n        );\n      });\n      commitChanges(tree, sourceFile.fileName, changes);\n    });\n  };\n}\n\nfunction getImportDeclarations(\n  node: ts.Node,\n  imports: ts.ImportDeclaration[]\n): void {\n  if (ts.isImportDeclaration(node)) {\n    imports.push(node);\n  }\n\n  ts.forEachChild(node, (childNode) =>\n    getImportDeclarations(childNode, imports)\n  );\n}\n\nfunction getTypedActionUsages(\n  node: ts.Node,\n  nodeIdentifiers: ts.Identifier[]\n): void {\n  if (ts.isIdentifier(node) && node.getText() === 'TypedAction') {\n    nodeIdentifiers.push(node);\n  }\n\n  ts.forEachChild(node, (childNode) =>\n    getTypedActionUsages(childNode, nodeIdentifiers)\n  );\n}\n\nfunction getStoreModelsNamedBindings(\n  node: ts.ImportDeclaration\n): ts.NamedImports | null {\n  const namedBindings = node?.importClause?.namedBindings;\n  if (\n    node.moduleSpecifier.getText().includes(storeModelsPath) &&\n    namedBindings &&\n    ts.isNamedImports(namedBindings)\n  ) {\n    return namedBindings;\n  }\n\n  return null;\n}\n\nexport default function (): Rule {\n  return chain([\n    migrateStoreTypedAction(),\n    migrateStoreTypedActionReferences(),\n  ]);\n}\n"]}