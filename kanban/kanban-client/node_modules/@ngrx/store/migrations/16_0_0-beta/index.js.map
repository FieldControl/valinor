{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/store/migrations/16_0_0-beta/index.ts"],"names":[],"mappings":";;AAAA,+BAAiC;AACjC,yDAA+D;AAC/D,yDAK+B;AAE/B,SAAS,kBAAkB;IACzB,OAAO,UAAC,IAAU;QAChB,IAAA,oCAAkB,EAAC,IAAI,EAAE,UAAC,UAAU;YAClC,IAAM,OAAO,GAAG,UAAU,CAAC,UAAU;iBAClC,MAAM,CAAC,EAAE,CAAC,mBAAmB,CAAC;iBAC9B,MAAM,CACL,UAAC,iBAAiB;gBAChB,OAAA,iBAAiB,CAAC,eAAe,CAAC,OAAO,CAAC,UAAU,CAAC;oBACnD,eAAe;oBACjB,iBAAiB,CAAC,eAAe,CAAC,OAAO,CAAC,UAAU,CAAC;wBACnD,eAAe;YAHjB,CAGiB,CACpB;iBACA,OAAO,CAAC,UAAC,iBAAiB;;gBACzB,OAAO,MAAA,MAAA,iBAAiB,CAAC,YAAY,0CAAE,aAAa,mCAAI,EAAE,CAAC;YAC7D,CAAC,CAAC;iBACD,OAAO,CAAC,UAAC,OAAO;gBACf,OAAA,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;YAAlD,CAAkD,CACnD;iBACA,MAAM,CACL,UAAC,OAAO,IAAK,OAAA,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,cAAc,EAAnD,CAAmD,CACjE,CAAC;YACJ,IAAI,CAAC,OAAO,CAAC,MAAM;gBAAE,OAAO;YAE5B,IAAM,OAAO,GAAoC,EAAE,CAAC;YACpD,OAAO,CAAC,OAAO,CAAC,UAAC,OAAO;gBACtB,OAAO,CAAC,IAAI,CACV,IAAI,8BAAY,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAChE,CAAC;gBACF,OAAO,CAAC,IAAI,CACV,IAAI,8BAAY,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,EAAE,iBAAiB,CAAC,CACtE,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;YACnC,OAAO,IAAA,+BAAa,EAAC,IAAI,EAAE,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAEzD,SAAS,KAAK,CAAC,IAAa;gBAC1B,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBAE7B,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC;oBAAE,OAAO;gBACvC,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC;oBAAE,OAAO;gBAC9C,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,cAAc;oBAAE,OAAO;gBAEpD,OAAO,CAAC,IAAI,CACV,IAAI,8BAAY,CACd,UAAU,CAAC,QAAQ,EACnB,IAAI,CAAC,UAAU,CAAC,GAAG,EACnB,IAAI,CAAC,UAAU,CAAC,GAAG,CACpB,CACF,CAAC;gBACF,OAAO,CAAC,IAAI,CACV,IAAI,8BAAY,CACd,UAAU,CAAC,QAAQ,EACnB,IAAI,CAAC,UAAU,CAAC,GAAG,EACnB,iBAAiB,CAClB,CACF,CAAC;YACJ,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC;AAED;IACE,OAAO,IAAA,kBAAK,EAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;AACrC,CAAC;AAFD,4BAEC","sourcesContent":["import * as ts from 'typescript';\nimport { Rule, chain, Tree } from '@angular-devkit/schematics';\nimport {\n  visitTSSourceFiles,\n  RemoveChange,\n  InsertChange,\n  commitChanges,\n} from '../../schematics-core';\n\nfunction updateGetMockStore(): Rule {\n  return (tree: Tree) => {\n    visitTSSourceFiles(tree, (sourceFile) => {\n      const imports = sourceFile.statements\n        .filter(ts.isImportDeclaration)\n        .filter(\n          (importDeclaration) =>\n            importDeclaration.moduleSpecifier.getText(sourceFile) ===\n              \"'@ngrx/store'\" ||\n            importDeclaration.moduleSpecifier.getText(sourceFile) ===\n              '\"@ngrx/store\"'\n        )\n        .flatMap((importDeclaration) => {\n          return importDeclaration.importClause?.namedBindings ?? [];\n        })\n        .flatMap((binding) =>\n          ts.isNamedImports(binding) ? binding.elements : []\n        )\n        .filter(\n          (element) => element.name.getText(sourceFile) === 'getMockStore'\n        );\n      if (!imports.length) return;\n\n      const changes: (InsertChange | RemoveChange)[] = [];\n      imports.forEach((binding) => {\n        changes.push(\n          new RemoveChange(sourceFile.fileName, binding.pos, binding.end)\n        );\n        changes.push(\n          new InsertChange(sourceFile.fileName, binding.pos, 'createMockStore')\n        );\n      });\n\n      ts.forEachChild(sourceFile, crawl);\n      return commitChanges(tree, sourceFile.fileName, changes);\n\n      function crawl(node: ts.Node) {\n        ts.forEachChild(node, crawl);\n\n        if (!ts.isCallExpression(node)) return;\n        if (!ts.isIdentifier(node.expression)) return;\n        if (node.expression.text !== 'getMockStore') return;\n\n        changes.push(\n          new RemoveChange(\n            sourceFile.fileName,\n            node.expression.pos,\n            node.expression.end\n          )\n        );\n        changes.push(\n          new InsertChange(\n            sourceFile.fileName,\n            node.expression.pos,\n            'createMockStore'\n          )\n        );\n      }\n    });\n  };\n}\n\nexport default function (): Rule {\n  return chain([updateGetMockStore]);\n}\n"]}