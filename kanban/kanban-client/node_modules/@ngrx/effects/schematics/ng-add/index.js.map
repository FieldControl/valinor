{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/effects/schematics/ng-add/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport {\n  Rule,\n  SchematicContext,\n  SchematicsException,\n  Tree,\n  apply,\n  applyTemplates,\n  branchAndMerge,\n  chain,\n  filter,\n  mergeWith,\n  move,\n  noop,\n  url,\n} from '@angular-devkit/schematics';\nimport {\n  InsertChange,\n  addImportToModule,\n  buildRelativePath,\n  findModuleFromOptions,\n  getProjectPath,\n  insertImport,\n  parseName,\n  stringUtils,\n  addPackageToPackageJson,\n  platformVersion,\n} from '../../schematics-core';\nimport { Schema as EffectOptions } from './schema';\nimport { NodePackageInstallTask } from '@angular-devkit/schematics/tasks';\nimport { getProjectMainFile } from '../../schematics-core/utility/project';\nimport { isStandaloneApp } from '@schematics/angular/utility/ng-ast-utils';\nimport {\n  addFunctionalProvidersToStandaloneBootstrap,\n  callsProvidersFunction,\n} from '../../schematics-core/utility/standalone';\n\nfunction addImportToNgModule(options: EffectOptions): Rule {\n  return (host: Tree) => {\n    const modulePath = options.module;\n\n    if (!modulePath) {\n      return host;\n    }\n\n    if (!host.exists(modulePath)) {\n      throw new Error(`Specified module path ${modulePath} does not exist`);\n    }\n\n    const text = host.read(modulePath);\n    if (text === null) {\n      throw new SchematicsException(`File ${modulePath} does not exist.`);\n    }\n    const sourceText = text.toString('utf-8');\n\n    const source = ts.createSourceFile(\n      modulePath,\n      sourceText,\n      ts.ScriptTarget.Latest,\n      true\n    );\n\n    const effectsName = `${stringUtils.classify(`${options.name}Effects`)}`;\n\n    const effectsModuleImport = insertImport(\n      source,\n      modulePath,\n      'EffectsModule',\n      '@ngrx/effects'\n    );\n\n    const effectsPath =\n      `/${options.path}/` +\n      (options.flat ? '' : stringUtils.dasherize(options.name) + '/') +\n      (options.group ? 'effects/' : '') +\n      stringUtils.dasherize(options.name) +\n      '.effects';\n    const relativePath = buildRelativePath(modulePath, effectsPath);\n    const effectsImport = insertImport(\n      source,\n      modulePath,\n      effectsName,\n      relativePath\n    );\n\n    const effectsSetup = options.minimal ? `[]` : `[${effectsName}]`;\n    const [effectsNgModuleImport] = addImportToModule(\n      source,\n      modulePath,\n      `EffectsModule.forRoot(${effectsSetup})`,\n      relativePath\n    );\n\n    let changes = [effectsModuleImport, effectsNgModuleImport];\n\n    if (!options.minimal) {\n      changes = changes.concat([effectsImport]);\n    }\n\n    const recorder = host.beginUpdate(modulePath);\n    for (const change of changes) {\n      if (change instanceof InsertChange) {\n        recorder.insertLeft(change.pos, change.toAdd);\n      }\n    }\n    host.commitUpdate(recorder);\n\n    return host;\n  };\n}\n\nfunction addNgRxEffectsToPackageJson() {\n  return (host: Tree, context: SchematicContext) => {\n    addPackageToPackageJson(\n      host,\n      'dependencies',\n      '@ngrx/effects',\n      platformVersion\n    );\n    context.addTask(new NodePackageInstallTask());\n    return host;\n  };\n}\n\nfunction addStandaloneConfig(options: EffectOptions): Rule {\n  return (host: Tree) => {\n    const mainFile = getProjectMainFile(host, options);\n\n    if (host.exists(mainFile)) {\n      const providerFn = 'provideEffects';\n\n      if (callsProvidersFunction(host, mainFile, providerFn)) {\n        // exit because the store config is already provided\n        return host;\n      }\n\n      const effectsName = `${stringUtils.classify(`${options.name}Effects`)}`;\n\n      const providerOptions = options.minimal\n        ? []\n        : [ts.factory.createIdentifier(effectsName)];\n\n      const patchedConfigFile = addFunctionalProvidersToStandaloneBootstrap(\n        host,\n        mainFile,\n        providerFn,\n        '@ngrx/effects',\n        providerOptions\n      );\n\n      if (options.minimal) {\n        // no need to add imports if it is minimal\n        return host;\n      }\n\n      // insert effects import into the patched file\n      const configFileContent = host.read(patchedConfigFile);\n      const source = ts.createSourceFile(\n        patchedConfigFile,\n        configFileContent?.toString('utf-8') || '',\n        ts.ScriptTarget.Latest,\n        true\n      );\n\n      const effectsPath =\n        `/${options.path}/` +\n        (options.flat ? '' : stringUtils.dasherize(options.name) + '/') +\n        (options.group ? 'effects/' : '') +\n        stringUtils.dasherize(options.name) +\n        '.effects';\n\n      const relativePath = buildRelativePath(\n        `/${patchedConfigFile}`,\n        effectsPath\n      );\n\n      const change = insertImport(\n        source,\n        patchedConfigFile,\n        effectsName,\n        relativePath\n      );\n\n      const recorder = host.beginUpdate(patchedConfigFile);\n\n      if (change instanceof InsertChange) {\n        recorder.insertLeft(change.pos, change.toAdd);\n      }\n\n      host.commitUpdate(recorder);\n\n      return host;\n    }\n\n    throw new SchematicsException(\n      `Main file not found for a project ${options.project}`\n    );\n  };\n}\n\nexport default function (options: EffectOptions): Rule {\n  return (host: Tree, context: SchematicContext) => {\n    const mainFile = getProjectMainFile(host, options);\n    const isStandalone = isStandaloneApp(host, mainFile);\n\n    options.path = getProjectPath(host, options);\n\n    if (options.module && !isStandalone) {\n      options.module = findModuleFromOptions(host, options);\n    }\n\n    const parsedPath = parseName(options.path, options.name || '');\n    options.name = parsedPath.name;\n    options.path = parsedPath.path;\n\n    const templateSource = apply(url('./files'), [\n      options.skipTests\n        ? filter((path) => !path.endsWith('.spec.ts.template'))\n        : noop(),\n      options.minimal ? filter((_) => false) : noop(),\n      applyTemplates({\n        ...stringUtils,\n        'if-flat': (s: string) =>\n          stringUtils.group(\n            options.flat ? '' : s,\n            options.group ? 'effects' : ''\n          ),\n        ...(options as object),\n      } as any),\n      move(parsedPath.path),\n    ]);\n\n    const configOrModuleUpdate = isStandalone\n      ? addStandaloneConfig(options)\n      : addImportToNgModule(options);\n\n    return chain([\n      branchAndMerge(chain([configOrModuleUpdate, mergeWith(templateSource)])),\n      options && options.skipPackageJson\n        ? noop()\n        : addNgRxEffectsToPackageJson(),\n    ])(host, context);\n  };\n}\n"]}