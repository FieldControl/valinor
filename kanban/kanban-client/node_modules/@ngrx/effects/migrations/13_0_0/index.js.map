{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/effects/migrations/13_0_0/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport { Path } from '@angular-devkit/core';\nimport { Tree, Rule, chain } from '@angular-devkit/schematics';\nimport {\n  InsertChange,\n  RemoveChange,\n  replaceImport,\n  commitChanges,\n  visitTSSourceFiles,\n} from '../../schematics-core';\n\nexport function migrateToCreators(): Rule {\n  return (tree: Tree) => {\n    visitTSSourceFiles(tree, (sourceFile) => {\n      const effectsPerClass = sourceFile.statements\n        .filter(ts.isClassDeclaration)\n        .map((clas) =>\n          clas.members.filter(ts.isPropertyDeclaration).filter((property) => {\n            const decorators = ts.getDecorators(property);\n            return decorators && decorators.some(isEffectDecorator);\n          })\n        );\n\n      const effects = effectsPerClass.reduce(\n        (acc, effects) => acc.concat(effects),\n        []\n      );\n\n      const createEffectsChanges = replaceEffectDecorators(\n        tree,\n        sourceFile,\n        effects\n      );\n      const importChanges = replaceImport(\n        sourceFile,\n        sourceFile.fileName as Path,\n        '@ngrx/effects',\n        'Effect',\n        'createEffect'\n      );\n\n      commitChanges(tree, sourceFile.fileName, [\n        ...importChanges,\n        ...createEffectsChanges,\n      ]);\n    });\n  };\n}\n\nfunction replaceEffectDecorators(\n  host: Tree,\n  sourceFile: ts.SourceFile,\n  effects: ts.PropertyDeclaration[]\n) {\n  const inserts = effects\n    .map((effect) => {\n      if (!effect.initializer) {\n        return [];\n      }\n      const decorator = (ts.getDecorators(effect) || []).find(\n        isEffectDecorator\n      );\n      if (!decorator) {\n        return [];\n      }\n      if (effect.initializer.getText().includes('createEffect')) {\n        return [];\n      }\n      const effectArguments = getDispatchProperties(\n        host,\n        sourceFile.text,\n        decorator\n      );\n      const end = effectArguments ? `, ${effectArguments})` : ')';\n\n      return [\n        new InsertChange(\n          sourceFile.fileName,\n          effect.initializer.pos,\n          ' createEffect(() =>'\n        ),\n        new InsertChange(sourceFile.fileName, effect.initializer.end, end),\n      ];\n    })\n    .reduce((acc, inserts) => acc.concat(inserts), []);\n\n  const removes = effects\n    .map((effect) => ts.getDecorators(effect))\n    .map((decorators) => {\n      if (!decorators) {\n        return [];\n      }\n      const effectDecorators = decorators.filter(isEffectDecorator);\n      return effectDecorators.map((decorator) => {\n        return new RemoveChange(\n          sourceFile.fileName,\n          decorator.expression.pos - 1, // also get the @ sign\n          decorator.expression.end\n        );\n      });\n    })\n    .reduce((acc, removes) => acc.concat(removes), []);\n\n  return [...inserts, ...removes];\n}\n\nfunction isEffectDecorator(decorator: ts.Decorator) {\n  return (\n    ts.isCallExpression(decorator.expression) &&\n    ts.isIdentifier(decorator.expression.expression) &&\n    decorator.expression.expression.text === 'Effect'\n  );\n}\n\nfunction getDispatchProperties(\n  host: Tree,\n  fileContent: string,\n  decorator: ts.Decorator\n) {\n  if (!decorator.expression || !ts.isCallExpression(decorator.expression)) {\n    return '';\n  }\n\n  // just copy the effect properties\n  const args = fileContent\n    .substring(\n      decorator.expression.arguments.pos,\n      decorator.expression.arguments.end\n    )\n    .trim();\n  return args;\n}\n\nexport default function (): Rule {\n  return chain([migrateToCreators()]);\n}\n"]}