{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/effects/migrations/15_0_0-beta/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AACjC,yDAKoC;AACpC,yDAK+B;AAE/B,SAAgB,qBAAqB;IACnC,OAAO,UAAC,IAAU,EAAE,GAAqB;QACvC,IAAA,oCAAkB,EAAC,IAAI,EAAE,UAAC,UAAU;YAClC,IAAM,OAAO,GAAoB,EAAE,CAAC;YAEpC,IAAI,wBAAwB,GAAG,KAAK,CAAC;YACrC,qBAAqB,CAAC,UAAU,EAAE,UAAC,IAAI;gBACrC,IACE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,gBAAgB;oBACxC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe;yBACtC,OAAO,EAAE;yBACT,QAAQ,CAAC,eAAe,CAAC,EAC5B,CAAC;oBACD,wBAAwB,GAAG,IAAI,CAAC;oBAChC,OAAO;gBACT,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,wBAAwB,EAAE,CAAC;gBAC9B,OAAO;YACT,CAAC;YAED,mBAAmB,CAAC,UAAU,EAAE,UAAC,IAAI;gBAC7B,IAAA,KAAA,OAAkB,IAAI,CAAC,SAAS,IAAA,EAA/B,aAAa,QAAkB,CAAC;gBACvC,IAAI,aAAa,IAAI,EAAE,CAAC,wBAAwB,CAAC,aAAa,CAAC,EAAE,CAAC;oBAChE,IAAM,QAAQ,GAAG,aAAa,CAAC,QAAQ;yBACpC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,OAAO,EAAE,EAAX,CAAW,CAAC;yBACvB,IAAI,CAAC,IAAI,CAAC,CAAC;oBACd,OAAO,CAAC,IAAI,CACV,IAAA,qCAAmB,EACjB,UAAU,EACV,aAAa,EACb,aAAa,CAAC,OAAO,EAAE,EACvB,QAAQ,CACT,CACF,CAAC;gBACJ,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,IAAA,+BAAa,EAAC,IAAI,EAAE,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAElD,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;gBACnB,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;YAClE,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC;AA9CD,sDA8CC;AAED,SAAS,mBAAmB,CAC1B,IAAa,EACb,OAA0C;IAE1C,IACE,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC;QACzB,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC;QAChC,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,gBAAgB,EACzC,CAAC;QACD,OAAO,CAAC,IAAI,CAAC,CAAC;IAChB,CAAC;IAED,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,UAAC,SAAS,IAAK,OAAA,mBAAmB,CAAC,SAAS,EAAE,OAAO,CAAC,EAAvC,CAAuC,CAAC,CAAC;AAChF,CAAC;AAED,SAAS,qBAAqB,CAC5B,IAAa,EACb,OAA2C;IAE3C,IAAI,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC;QAC/B,OAAO,CAAC,IAAI,CAAC,CAAC;IAChB,CAAC;IAED,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,UAAC,SAAS;QAC9B,OAAA,qBAAqB,CAAC,SAAS,EAAE,OAAO,CAAC;IAAzC,CAAyC,CAC1C,CAAC;AACJ,CAAC;AAED;IACE,OAAO,IAAA,kBAAK,EAAC,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC;AAC1C,CAAC;AAFD,4BAEC","sourcesContent":["import * as ts from 'typescript';\nimport {\n  Tree,\n  Rule,\n  chain,\n  SchematicContext,\n} from '@angular-devkit/schematics';\nimport {\n  commitChanges,\n  createReplaceChange,\n  ReplaceChange,\n  visitTSSourceFiles,\n} from '../../schematics-core';\n\nexport function migrateProvideEffects(): Rule {\n  return (tree: Tree, ctx: SchematicContext) => {\n    visitTSSourceFiles(tree, (sourceFile) => {\n      const changes: ReplaceChange[] = [];\n\n      let isProvideEffectsImported = false;\n      visitImportSpecifiers(sourceFile, (node) => {\n        if (\n          node.name.getText() === 'provideEffects' &&\n          node.parent.parent.parent.moduleSpecifier\n            .getText()\n            .includes('@ngrx/effects')\n        ) {\n          isProvideEffectsImported = true;\n          return;\n        }\n      });\n\n      if (!isProvideEffectsImported) {\n        return;\n      }\n\n      visitProvideEffects(sourceFile, (node) => {\n        const [effectClasses] = node.arguments;\n        if (effectClasses && ts.isArrayLiteralExpression(effectClasses)) {\n          const spreaded = effectClasses.elements\n            .map((e) => e.getText())\n            .join(', ');\n          changes.push(\n            createReplaceChange(\n              sourceFile,\n              effectClasses,\n              effectClasses.getText(),\n              spreaded\n            )\n          );\n        }\n      });\n\n      commitChanges(tree, sourceFile.fileName, changes);\n\n      if (changes.length) {\n        ctx.logger.info(`[@ngrx/effects] Updated provideEffects usage`);\n      }\n    });\n  };\n}\n\nfunction visitProvideEffects(\n  node: ts.Node,\n  visitor: (node: ts.CallExpression) => void\n) {\n  if (\n    ts.isCallExpression(node) &&\n    ts.isIdentifier(node.expression) &&\n    node.expression.text === 'provideEffects'\n  ) {\n    visitor(node);\n  }\n\n  ts.forEachChild(node, (childNode) => visitProvideEffects(childNode, visitor));\n}\n\nfunction visitImportSpecifiers(\n  node: ts.Node,\n  visitor: (node: ts.ImportSpecifier) => void\n) {\n  if (ts.isImportSpecifier(node)) {\n    visitor(node);\n  }\n\n  ts.forEachChild(node, (childNode) =>\n    visitImportSpecifiers(childNode, visitor)\n  );\n}\n\nexport default function (): Rule {\n  return chain([migrateProvideEffects()]);\n}\n"]}