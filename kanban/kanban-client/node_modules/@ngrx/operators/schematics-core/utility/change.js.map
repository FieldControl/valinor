{"version":3,"file":"change.js","sourceRoot":"","sources":["../../../../../modules/operators/schematics-core/utility/change.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport { Tree, UpdateRecorder } from '@angular-devkit/schematics';\nimport { Path } from '@angular-devkit/core';\n\n/* istanbul ignore file */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport interface Host {\n  write(path: string, content: string): Promise<void>;\n  read(path: string): Promise<string>;\n}\n\nexport interface Change {\n  apply(host: Host): Promise<void>;\n\n  // The file this change should be applied to. Some changes might not apply to\n  // a file (maybe the config).\n  readonly path: string | null;\n\n  // The order this change should be applied. Normally the position inside the file.\n  // Changes are applied from the bottom of a file to the top.\n  readonly order: number;\n\n  // The description of this change. This will be outputted in a dry or verbose run.\n  readonly description: string;\n}\n\n/**\n * An operation that does nothing.\n */\nexport class NoopChange implements Change {\n  description = 'No operation.';\n  order = Infinity;\n  path = null;\n  apply() {\n    return Promise.resolve();\n  }\n}\n\n/**\n * Will add text to the source code.\n */\nexport class InsertChange implements Change {\n  order: number;\n  description: string;\n\n  constructor(public path: string, public pos: number, public toAdd: string) {\n    if (pos < 0) {\n      throw new Error('Negative positions are invalid');\n    }\n    this.description = `Inserted ${toAdd} into position ${pos} of ${path}`;\n    this.order = pos;\n  }\n\n  /**\n   * This method does not insert spaces if there is none in the original string.\n   */\n  apply(host: Host) {\n    return host.read(this.path).then((content) => {\n      const prefix = content.substring(0, this.pos);\n      const suffix = content.substring(this.pos);\n\n      return host.write(this.path, `${prefix}${this.toAdd}${suffix}`);\n    });\n  }\n}\n\n/**\n * Will remove text from the source code.\n */\nexport class RemoveChange implements Change {\n  order: number;\n  description: string;\n\n  constructor(public path: string, public pos: number, public end: number) {\n    if (pos < 0 || end < 0) {\n      throw new Error('Negative positions are invalid');\n    }\n    this.description = `Removed text in position ${pos} to ${end} of ${path}`;\n    this.order = pos;\n  }\n\n  apply(host: Host): Promise<void> {\n    return host.read(this.path).then((content) => {\n      const prefix = content.substring(0, this.pos);\n      const suffix = content.substring(this.end);\n\n      // TODO: throw error if toRemove doesn't match removed string.\n      return host.write(this.path, `${prefix}${suffix}`);\n    });\n  }\n}\n\n/**\n * Will replace text from the source code.\n */\nexport class ReplaceChange implements Change {\n  order: number;\n  description: string;\n\n  constructor(\n    public path: string,\n    public pos: number,\n    public oldText: string,\n    public newText: string\n  ) {\n    if (pos < 0) {\n      throw new Error('Negative positions are invalid');\n    }\n    this.description = `Replaced ${oldText} into position ${pos} of ${path} with ${newText}`;\n    this.order = pos;\n  }\n\n  apply(host: Host): Promise<void> {\n    return host.read(this.path).then((content) => {\n      const prefix = content.substring(0, this.pos);\n      const suffix = content.substring(this.pos + this.oldText.length);\n      const text = content.substring(this.pos, this.pos + this.oldText.length);\n\n      if (text !== this.oldText) {\n        return Promise.reject(\n          new Error(`Invalid replace: \"${text}\" != \"${this.oldText}\".`)\n        );\n      }\n\n      // TODO: throw error if oldText doesn't match removed string.\n      return host.write(this.path, `${prefix}${this.newText}${suffix}`);\n    });\n  }\n}\n\nexport function createReplaceChange(\n  sourceFile: ts.SourceFile,\n  node: ts.Node,\n  oldText: string,\n  newText: string\n): ReplaceChange {\n  return new ReplaceChange(\n    sourceFile.fileName,\n    node.getStart(sourceFile),\n    oldText,\n    newText\n  );\n}\n\nexport function createRemoveChange(\n  sourceFile: ts.SourceFile,\n  node: ts.Node,\n  from = node.getStart(sourceFile),\n  to = node.getEnd()\n): RemoveChange {\n  return new RemoveChange(sourceFile.fileName, from, to);\n}\n\nexport function createChangeRecorder(\n  tree: Tree,\n  path: string,\n  changes: Change[]\n): UpdateRecorder {\n  const recorder = tree.beginUpdate(path);\n  for (const change of changes) {\n    if (change instanceof InsertChange) {\n      recorder.insertLeft(change.pos, change.toAdd);\n    } else if (change instanceof RemoveChange) {\n      recorder.remove(change.pos, change.end - change.pos);\n    } else if (change instanceof ReplaceChange) {\n      recorder.remove(change.pos, change.oldText.length);\n      recorder.insertLeft(change.pos, change.newText);\n    }\n  }\n  return recorder;\n}\n\nexport function commitChanges(tree: Tree, path: string, changes: Change[]) {\n  if (changes.length === 0) {\n    return false;\n  }\n\n  const recorder = createChangeRecorder(tree, path, changes);\n  tree.commitUpdate(recorder);\n  return true;\n}\n"]}