{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../../modules/operators/schematics-core/utility/config.ts"],"names":[],"mappings":";;;AAAA,yDAAuE;AAkIvE,SAAgB,gBAAgB,CAAC,IAAU;IACzC,IAAM,aAAa,GAAG,CAAC,eAAe,EAAE,gBAAgB,EAAE,iBAAiB,CAAC,CAAC;IAC7E,IAAM,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAjB,CAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;IAElE,OAAO,IAAI,CAAC;AACd,CAAC;AALD,4CAKC;AAED,SAAgB,YAAY,CAAC,IAAU;IACrC,IAAM,IAAI,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;IACpC,IAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,IAAI,YAAY,KAAK,IAAI,EAAE;QACzB,MAAM,IAAI,gCAAmB,CAAC,0BAAmB,IAAI,MAAG,CAAC,CAAC;KAC3D;IACD,IAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,EAAE,CAAC;IAEvC,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AAC5B,CAAC;AATD,oCASC","sourcesContent":["import { SchematicsException, Tree } from '@angular-devkit/schematics';\n\n// The interfaces below are generated from the Angular CLI configuration schema\n// https://github.com/angular/angular-cli/blob/master/packages/@angular/cli/lib/config/schema.json\nexport interface AppConfig {\n  /**\n   * Name of the app.\n   */\n  name?: string;\n  /**\n   * Directory where app files are placed.\n   */\n  appRoot?: string;\n  /**\n   * The root directory of the app.\n   */\n  root?: string;\n  /**\n   * The output directory for build results.\n   */\n  outDir?: string;\n  /**\n   * List of application assets.\n   */\n  assets?: (\n    | string\n    | {\n        /**\n         * The pattern to match.\n         */\n        glob?: string;\n        /**\n         * The dir to search within.\n         */\n        input?: string;\n        /**\n         * The output path (relative to the outDir).\n         */\n        output?: string;\n      }\n  )[];\n  /**\n   * URL where files will be deployed.\n   */\n  deployUrl?: string;\n  /**\n   * Base url for the application being built.\n   */\n  baseHref?: string;\n  /**\n   * The runtime platform of the app.\n   */\n  platform?: 'browser' | 'server';\n  /**\n   * The name of the start HTML file.\n   */\n  index?: string;\n  /**\n   * The name of the main entry-point file.\n   */\n  main?: string;\n  /**\n   * The name of the polyfills file.\n   */\n  polyfills?: string;\n  /**\n   * The name of the test entry-point file.\n   */\n  test?: string;\n  /**\n   * The name of the TypeScript configuration file.\n   */\n  tsconfig?: string;\n  /**\n   * The name of the TypeScript configuration file for unit tests.\n   */\n  testTsconfig?: string;\n  /**\n   * The prefix to apply to generated selectors.\n   */\n  prefix?: string;\n  /**\n   * Experimental support for a service worker from @angular/service-worker.\n   */\n  serviceWorker?: boolean;\n  /**\n   * Global styles to be included in the build.\n   */\n  styles?: (\n    | string\n    | {\n        input?: string;\n        [name: string]: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n      }\n  )[];\n  /**\n   * Options to pass to style preprocessors\n   */\n  stylePreprocessorOptions?: {\n    /**\n     * Paths to include. Paths will be resolved to project root.\n     */\n    includePaths?: string[];\n  };\n  /**\n   * Global scripts to be included in the build.\n   */\n  scripts?: (\n    | string\n    | {\n        input: string;\n        [name: string]: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n      }\n  )[];\n  /**\n   * Source file for environment config.\n   */\n  environmentSource?: string;\n  /**\n   * Name and corresponding file for environment config.\n   */\n  environments?: {\n    [name: string]: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n  };\n  appShell?: {\n    app: string;\n    route: string;\n  };\n}\n\nexport function getWorkspacePath(host: Tree): string {\n  const possibleFiles = ['/angular.json', '/.angular.json', '/workspace.json'];\n  const path = possibleFiles.filter((path) => host.exists(path))[0];\n\n  return path;\n}\n\nexport function getWorkspace(host: Tree) {\n  const path = getWorkspacePath(host);\n  const configBuffer = host.read(path);\n  if (configBuffer === null) {\n    throw new SchematicsException(`Could not find (${path})`);\n  }\n  const config = configBuffer.toString();\n\n  return JSON.parse(config);\n}\n"]}