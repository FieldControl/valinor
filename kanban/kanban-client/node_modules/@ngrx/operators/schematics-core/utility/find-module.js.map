{"version":3,"file":"find-module.js","sourceRoot":"","sources":["../../../../../modules/operators/schematics-core/utility/find-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Path,\n  join,\n  normalize,\n  relative,\n  strings,\n  basename,\n  extname,\n  dirname,\n} from '@angular-devkit/core';\nimport { DirEntry, Tree } from '@angular-devkit/schematics';\n\nexport interface ModuleOptions {\n  module?: string;\n  name: string;\n  flat?: boolean;\n  path?: string;\n  skipImport?: boolean;\n}\n\n/**\n * Find the module referred by a set of options passed to the schematics.\n */\nexport function findModuleFromOptions(\n  host: Tree,\n  options: ModuleOptions\n): Path | undefined {\n  if (options.hasOwnProperty('skipImport') && options.skipImport) {\n    return undefined;\n  }\n\n  if (!options.module) {\n    const pathToCheck =\n      (options.path || '') +\n      (options.flat ? '' : '/' + strings.dasherize(options.name));\n\n    return normalize(findModule(host, pathToCheck));\n  } else {\n    const modulePath = normalize('/' + options.path + '/' + options.module);\n    const moduleBaseName = normalize(modulePath).split('/').pop();\n\n    if (host.exists(modulePath)) {\n      return normalize(modulePath);\n    } else if (host.exists(modulePath + '.ts')) {\n      return normalize(modulePath + '.ts');\n    } else if (host.exists(modulePath + '.module.ts')) {\n      return normalize(modulePath + '.module.ts');\n    } else if (host.exists(modulePath + '/' + moduleBaseName + '.module.ts')) {\n      return normalize(modulePath + '/' + moduleBaseName + '.module.ts');\n    } else {\n      throw new Error(`Specified module path ${modulePath} does not exist`);\n    }\n  }\n}\n\n/**\n * Function to find the \"closest\" module to a generated file's path.\n */\nexport function findModule(host: Tree, generateDir: string): Path {\n  let dir: DirEntry | null = host.getDir('/' + generateDir);\n\n  const moduleRe = /\\.module\\.ts$/;\n  const routingModuleRe = /-routing\\.module\\.ts/;\n\n  while (dir) {\n    const matches = dir.subfiles.filter(\n      (p) => moduleRe.test(p) && !routingModuleRe.test(p)\n    );\n\n    if (matches.length == 1) {\n      return join(dir.path, matches[0]);\n    } else if (matches.length > 1) {\n      throw new Error(\n        'More than one module matches. Use skip-import option to skip importing ' +\n          'the component into the closest module.'\n      );\n    }\n\n    dir = dir.parent;\n  }\n\n  throw new Error(\n    'Could not find an NgModule. Use the skip-import ' +\n      'option to skip importing in NgModule.'\n  );\n}\n\n/**\n * Build a relative path from one file path to another file path.\n */\nexport function buildRelativePath(from: string, to: string): string {\n  const {\n    path: fromPath,\n    filename: fromFileName,\n    directory: fromDirectory,\n  } = parsePath(from);\n  const {\n    path: toPath,\n    filename: toFileName,\n    directory: toDirectory,\n  } = parsePath(to);\n  const relativePath = relative(fromDirectory, toDirectory);\n  const fixedRelativePath = relativePath.startsWith('.')\n    ? relativePath\n    : `./${relativePath}`;\n\n  return !toFileName || toFileName === 'index.ts'\n    ? fixedRelativePath\n    : `${\n        fixedRelativePath.endsWith('/')\n          ? fixedRelativePath\n          : fixedRelativePath + '/'\n      }${convertToTypeScriptFileName(toFileName)}`;\n}\n\nfunction parsePath(path: string) {\n  const pathNormalized = normalize(path) as Path;\n  const filename = extname(pathNormalized) ? basename(pathNormalized) : '';\n  const directory = filename ? dirname(pathNormalized) : pathNormalized;\n  return {\n    path: pathNormalized,\n    filename,\n    directory,\n  };\n}\n/**\n * Strips the typescript extension and clears index filenames\n * foo.ts -> foo\n * index.ts -> empty\n */\nfunction convertToTypeScriptFileName(filename: string | undefined) {\n  return filename ? filename.replace(/(\\.ts)|(index\\.ts)$/, '') : '';\n}\n"]}