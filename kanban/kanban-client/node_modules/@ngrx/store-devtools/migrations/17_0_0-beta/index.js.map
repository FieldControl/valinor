{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/store-devtools/migrations/17_0_0-beta/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AACjC,yDAA+D;AAC/D,0DAMgC;AAEhC,SAAS,OAAO;IACd,OAAO,UAAC,IAAU;QAChB,IAAA,oCAAkB,EAAC,IAAI,EAAE,UAAC,UAAU;YAClC,IAAM,eAAe,GAAG,UAAU,CAAC,UAAU;iBAC1C,MAAM,CAAC,EAAE,CAAC,mBAAmB,CAAC;iBAC9B,MAAM,CAAC,UAAC,EAAmB;oBAAjB,eAAe,qBAAA;gBACxB,OAAA,eAAe,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,sBAAsB,CAAC;YAApE,CAAoE,CACrE,CAAC;YAEJ,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACjC,OAAO;YACT,CAAC;YAED,IAAM,OAAO,4BAAO,oBAAoB,CAAC,UAAU,CAAC,SAAC,CAAC;YAEtD,IAAA,+BAAa,EAAC,IAAI,EAAE,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC;AAED,SAAS,oBAAoB,CAAC,UAAyB;IACrD,IAAM,OAAO,GAAa,EAAE,CAAC;IAC7B,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,EAAnB,CAAmB,CAAC,CAAC;IAC3D,OAAO,OAAO,CAAC;IAEf,SAAS,IAAI,CAAC,IAAa,EAAE,OAAiB;QAC5C,IACE,EAAE,CAAC,0BAA0B,CAAC,IAAI,CAAC;YACnC,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,YAAY;YAC/B,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC;YAChC,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,qBAAqB;YAC9C,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,EAChC,CAAC;YACD,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;gBAC3B,IAAA,KAAA,OAAmB,IAAI,CAAC,MAAM,CAAC,SAAS,IAAA,EAAvC,cAAc,QAAyB,CAAC;gBAE/C,IAAI,EAAE,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,CAAC;oBACjD,YAAY,CAAC,UAAU,EAAE,cAAc,EAAE,UAAC,MAAM;wBAC9C,OAAA,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;oBAApB,CAAoB,CACrB,CAAC;gBACJ,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,oBAAoB,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,UAAC,MAAM;oBACnD,OAAA,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;gBAApB,CAAoB,CACrB,CAAC;YACJ,CAAC;QACH,CAAC;QAED,IACE,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC;YACzB,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC;YAChC,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,sBAAsB,EAC/C,CAAC;YACD,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;gBACpB,IAAA,KAAA,OAAmB,IAAI,CAAC,SAAS,IAAA,EAAhC,cAAc,QAAkB,CAAC;gBAExC,IAAI,EAAE,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE,CAAC;oBACjD,YAAY,CAAC,UAAU,EAAE,cAAc,EAAE,UAAC,MAAM;wBAC9C,OAAA,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;oBAApB,CAAoB,CACrB,CAAC;gBACJ,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,oBAAoB,CAAC,UAAU,EAAE,IAAI,EAAE,UAAC,MAAM;oBAC5C,OAAA,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;gBAApB,CAAoB,CACrB,CAAC;YACJ,CAAC;QACH,CAAC;QAED,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,UAAC,SAAS,IAAK,OAAA,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,EAAxB,CAAwB,CAAC,CAAC;IACjE,CAAC;AACH,CAAC;AAED,SAAS,YAAY,CACnB,UAAyB,EACzB,cAA0C,EAC1C,SAAsC;IAEtC,IAAM,0BAA0B,GAAG,cAAc,CAAC,UAAU,CAAC,IAAI,CAC/D,UAAC,CAAC;QACA,OAAA,EAAE,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAC1B,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC;YACvB,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,oBAAoB;IAFpC,CAEoC,CACvC,CAAC;IAEF,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAChC,wBAAwB,EAAE,CAAC;IAC7B,CAAC;SAAM,IAAI,EAAE,CAAC,oBAAoB,CAAC,0BAA0B,CAAC,EAAE,CAAC;QAC/D,+BAA+B,CAAC,0BAA0B,CAAC,CAAC;IAC9D,CAAC;IAED,SAAS,wBAAwB;QAC/B,IAAM,UAAU,GAAG,cAAc,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACtD,IAAM,KAAK,GACT,CAAC,cAAc,CAAC,UAAU,CAAC,MAAM;YACjC,UAAU;iBACP,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;iBACnC,IAAI,EAAE;iBACN,QAAQ,CAAC,GAAG,CAAC;YACd,CAAC,CAAC,EAAE;YACJ,CAAC,CAAC,GAAG,CAAC;QAEV,SAAS,CACP,IAAI,8BAAY,CACd,UAAU,CAAC,QAAQ,EACnB,cAAc,CAAC,MAAM,EAAE,GAAG,CAAC,EAC3B,UAAG,KAAK,yBAAsB,CAAC,IAAI,EAAE,CACtC,CACF,CAAC;IACJ,CAAC;IAED,SAAS,+BAA+B,CACtC,kBAAyC;QAEzC,IAAM,YAAY,GAAG,kBAAkB,CAAC,WAAW;aAChD,OAAO,CAAC,UAAU,CAAC;aACnB,IAAI,EAAE,CAAC;QACV,SAAS,CACP,IAAA,qCAAmB,EACjB,UAAU,EACV,kBAAkB,CAAC,IAAI,EACvB,oBAAoB,EACpB,eAAe,CAChB,CACF,CAAC;QACF,SAAS,CACP,IAAA,qCAAmB,EACjB,UAAU,EACV,kBAAkB,CAAC,WAAW,EAC9B,YAAY,EACZ,YAAY,KAAK,MAAM;YACrB,CAAC,CAAC,OAAO;YACT,CAAC,CAAC,YAAY,KAAK,OAAO;gBAC1B,CAAC,CAAC,MAAM;gBACR,CAAC,CAAC,WAAI,YAAY,CAAE,CACvB,CACF,CAAC;IACJ,CAAC;AACH,CAAC;AAED,SAAS,oBAAoB,CAC3B,UAAyB,EACzB,cAAiC,EACjC,SAAyC;IAEzC,SAAS,CACP,IAAI,8BAAY,CACd,UAAU,CAAC,QAAQ,EACnB,cAAc,CAAC,MAAM,EAAE,GAAG,CAAC,EAC3B,uBAAuB,CACxB,CACF,CAAC;AACJ,CAAC;AAED;IACE,OAAO,IAAA,kBAAK,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AAC5B,CAAC;AAFD,4BAEC","sourcesContent":["import * as ts from 'typescript';\nimport { Rule, chain, Tree } from '@angular-devkit/schematics';\nimport {\n  visitTSSourceFiles,\n  commitChanges,\n  InsertChange,\n  Change,\n  createReplaceChange,\n} from '../..//schematics-core';\n\nfunction migrate() {\n  return (tree: Tree) => {\n    visitTSSourceFiles(tree, (sourceFile) => {\n      const devtoolsImports = sourceFile.statements\n        .filter(ts.isImportDeclaration)\n        .filter(({ moduleSpecifier }) =>\n          moduleSpecifier.getText(sourceFile).includes('@ngrx/store-devtools')\n        );\n\n      if (devtoolsImports.length === 0) {\n        return;\n      }\n\n      const changes = [...findAndUpdateConfigs(sourceFile)];\n\n      commitChanges(tree, sourceFile.fileName, changes);\n    });\n  };\n}\n\nfunction findAndUpdateConfigs(sourceFile: ts.SourceFile) {\n  const changes: Change[] = [];\n  ts.forEachChild(sourceFile, (node) => find(node, changes));\n  return changes;\n\n  function find(node: ts.Node, changes: Change[]) {\n    if (\n      ts.isPropertyAccessExpression(node) &&\n      node.name.text === 'instrument' &&\n      ts.isIdentifier(node.expression) &&\n      node.expression.text === 'StoreDevtoolsModule' &&\n      ts.isCallExpression(node.parent)\n    ) {\n      if (node.parent.arguments.length) {\n        const [devtoolsConfig] = node.parent.arguments;\n\n        if (ts.isObjectLiteralExpression(devtoolsConfig)) {\n          updateConfig(sourceFile, devtoolsConfig, (change) =>\n            changes.push(change)\n          );\n        }\n      } else {\n        createDevtoolsConfig(sourceFile, node.parent, (change) =>\n          changes.push(change)\n        );\n      }\n    }\n\n    if (\n      ts.isCallExpression(node) &&\n      ts.isIdentifier(node.expression) &&\n      node.expression.text === 'provideStoreDevtools'\n    ) {\n      if (node.arguments.length) {\n        const [devtoolsConfig] = node.arguments;\n\n        if (ts.isObjectLiteralExpression(devtoolsConfig)) {\n          updateConfig(sourceFile, devtoolsConfig, (change) =>\n            changes.push(change)\n          );\n        }\n      } else {\n        createDevtoolsConfig(sourceFile, node, (change) =>\n          changes.push(change)\n        );\n      }\n    }\n\n    ts.forEachChild(node, (childNode) => find(childNode, changes));\n  }\n}\n\nfunction updateConfig(\n  sourceFile: ts.SourceFile,\n  devtoolsConfig: ts.ObjectLiteralExpression,\n  addChange: (changes: Change) => number\n) {\n  const connectOutsideZoneProperty = devtoolsConfig.properties.find(\n    (p) =>\n      ts.isPropertyAssignment(p) &&\n      ts.isIdentifier(p.name) &&\n      p.name.text === 'connectOutsideZone'\n  );\n\n  if (!connectOutsideZoneProperty) {\n    addConnectInZoneProperty();\n  } else if (ts.isPropertyAssignment(connectOutsideZoneProperty)) {\n    replaceConnectOutsideZoneConfig(connectOutsideZoneProperty);\n  }\n\n  function addConnectInZoneProperty() {\n    const configText = devtoolsConfig.getText(sourceFile);\n    const comma =\n      !devtoolsConfig.properties.length ||\n      configText\n        .substring(0, configText.length - 1)\n        .trim()\n        .endsWith(',')\n        ? ''\n        : ',';\n\n    addChange(\n      new InsertChange(\n        sourceFile.fileName,\n        devtoolsConfig.getEnd() - 1,\n        `${comma} connectInZone: true`.trim()\n      )\n    );\n  }\n\n  function replaceConnectOutsideZoneConfig(\n    connectOutsideZone: ts.PropertyAssignment\n  ) {\n    const currentValue = connectOutsideZone.initializer\n      .getText(sourceFile)\n      .trim();\n    addChange(\n      createReplaceChange(\n        sourceFile,\n        connectOutsideZone.name,\n        'connectOutsideZone',\n        'connectInZone'\n      )\n    );\n    addChange(\n      createReplaceChange(\n        sourceFile,\n        connectOutsideZone.initializer,\n        currentValue,\n        currentValue === 'true'\n          ? 'false'\n          : currentValue === 'false'\n          ? 'true'\n          : `!${currentValue}`\n      )\n    );\n  }\n}\n\nfunction createDevtoolsConfig(\n  sourceFile: ts.SourceFile,\n  callExpression: ts.CallExpression,\n  addChange: (...items: Change[]) => number\n) {\n  addChange(\n    new InsertChange(\n      sourceFile.fileName,\n      callExpression.getEnd() - 1,\n      `{connectInZone: true}`\n    )\n  );\n}\n\nexport default function (): Rule {\n  return chain([migrate()]);\n}\n"]}