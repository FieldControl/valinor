export declare class Debugger implements Console {
    Console: any;
    protected console: Console;
    protected isEnabled: boolean;
    protected prefix: string;
    constructor(console: Console, isEnabled?: boolean, prefix?: string);
    readonly memory: any;
    assert(value: any, message?: string, ...optionalParams: any[]): void;
    assert(test?: boolean, message?: string, ...optionalParams: any[]): void;
    countReset(label?: string): void;
    dir(obj: any, options?: {
        showHidden?: boolean;
        depth?: number;
        colors?: boolean;
    }): void;
    dir(value?: any, ...optionalParams: any[]): void;
    error(message?: any, ...optionalParams: any[]): void;
    info(message?: any, ...optionalParams: any[]): void;
    log(message?: any, ...optionalParams: any[]): void;
    time(label: string): void;
    time(timerName?: string): void;
    timeEnd(label: string): void;
    timeEnd(timerName?: string): void;
    timeLog(label: string, ...data: any[]): void;
    timeStamp(label: string): void;
    timeStamp(timerName?: string): void;
    timeline(label: string): void;
    timeline(timerName?: string): void;
    timelineEnd(label: string): void;
    timelineEnd(timerName?: string): void;
    trace(message?: any, ...optionalParams: any[]): void;
    warn(message?: any, ...optionalParams: any[]): void;
    clear(): void;
    count(countTitle?: string): void;
    debug(message?: any, ...optionalParams: any[]): void;
    dirxml(value: any): void;
    exception(message?: string, ...optionalParams: any[]): void;
    group(groupTitle?: string): void;
    groupCollapsed(groupTitle?: string): void;
    groupEnd(): void;
    markTimeline(label?: string): void;
    profile(reportName?: string): void;
    profileEnd(): void;
    table(...data: any[]): void;
    /**
     * Throws usual error in debug mode and non-blocking otherwise
     * @param {Error} error
     */
    throw(error: Error): void;
    protected doIfEnabled(action: Function): any;
    protected addPrefix(message: any): any;
}
