import { from } from 'rxjs';
import { Inject, Injectable, Optional } from '@angular/core';
import { ApolloClient } from '@apollo/client/core';
import { QueryRef } from './query-ref';
import { APOLLO_FLAGS, APOLLO_NAMED_OPTIONS, APOLLO_OPTIONS } from './tokens';
import { fixObservable, fromPromise, useMutationLoading, wrapWithZone } from './utils';
import * as i0 from "@angular/core";
export class ApolloBase {
    ngZone;
    flags;
    _client;
    useInitialLoading;
    useMutationLoading;
    constructor(ngZone, flags, _client) {
        this.ngZone = ngZone;
        this.flags = flags;
        this._client = _client;
        this.useInitialLoading = flags?.useInitialLoading ?? false;
        this.useMutationLoading = flags?.useMutationLoading ?? false;
    }
    watchQuery(options) {
        return new QueryRef(this.ensureClient().watchQuery({
            ...options,
        }), this.ngZone, {
            useInitialLoading: this.useInitialLoading,
            ...options,
        });
    }
    query(options) {
        return fromPromise(() => this.ensureClient().query({ ...options }));
    }
    mutate(options) {
        return useMutationLoading(fromPromise(() => this.ensureClient().mutate({ ...options })), options.useMutationLoading ?? this.useMutationLoading);
    }
    subscribe(options, extra) {
        const obs = from(fixObservable(this.ensureClient().subscribe({ ...options })));
        return extra && extra.useZone !== true ? obs : wrapWithZone(obs, this.ngZone);
    }
    /**
     * Get an instance of ApolloClient
     */
    get client() {
        return this.ensureClient();
    }
    /**
     * Set a new instance of ApolloClient
     * Remember to clean up the store before setting a new client.
     *
     * @param client ApolloClient instance
     */
    set client(client) {
        if (this._client) {
            throw new Error('Client has been already defined');
        }
        this._client = client;
    }
    ensureClient() {
        this.checkInstance();
        return this._client;
    }
    checkInstance() {
        if (this._client) {
            return true;
        }
        else {
            throw new Error('Client has not been defined yet');
        }
    }
}
export class Apollo extends ApolloBase {
    map = new Map();
    constructor(ngZone, apolloOptions, apolloNamedOptions, flags) {
        super(ngZone, flags);
        if (apolloOptions) {
            this.createDefault(apolloOptions);
        }
        if (apolloNamedOptions && typeof apolloNamedOptions === 'object') {
            for (let name in apolloNamedOptions) {
                if (apolloNamedOptions.hasOwnProperty(name)) {
                    const options = apolloNamedOptions[name];
                    this.create(options, name);
                }
            }
        }
    }
    /**
     * Create an instance of ApolloClient
     * @param options Options required to create ApolloClient
     * @param name client's name
     */
    create(options, name) {
        if (isNamed(name)) {
            this.createNamed(name, options);
        }
        else {
            this.createDefault(options);
        }
    }
    /**
     * Use a default ApolloClient
     */
    default() {
        return this;
    }
    /**
     * Use a named ApolloClient
     * @param name client's name
     */
    use(name) {
        if (isNamed(name)) {
            return this.map.get(name);
        }
        else {
            return this.default();
        }
    }
    /**
     * Create a default ApolloClient, same as `apollo.create(options)`
     * @param options ApolloClient's options
     */
    createDefault(options) {
        if (this._client) {
            throw new Error('Apollo has been already created.');
        }
        this.client = this.ngZone.runOutsideAngular(() => new ApolloClient(options));
    }
    /**
     * Create a named ApolloClient, same as `apollo.create(options, name)`
     * @param name client's name
     * @param options ApolloClient's options
     */
    createNamed(name, options) {
        if (this.map.has(name)) {
            throw new Error(`Client ${name} has been already created`);
        }
        this.map.set(name, new ApolloBase(this.ngZone, this.flags, this.ngZone.runOutsideAngular(() => new ApolloClient(options))));
    }
    /**
     * Remember to clean up the store before removing a client
     * @param name client's name
     */
    removeClient(name) {
        if (isNamed(name)) {
            this.map.delete(name);
        }
        else {
            this._client = undefined;
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: Apollo, deps: [{ token: i0.NgZone }, { token: APOLLO_OPTIONS, optional: true }, { token: APOLLO_NAMED_OPTIONS, optional: true }, { token: APOLLO_FLAGS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: Apollo });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: Apollo, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [APOLLO_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [APOLLO_NAMED_OPTIONS]
                }, {
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [APOLLO_FLAGS]
                }, {
                    type: Optional
                }] }] });
function isNamed(name) {
    return !!name && name !== 'default';
}
//# sourceMappingURL=data:application/json;base64,