{"ast":null,"code":"'use strict';\n\nvar utils = require('./../utils');\n\nvar settle = require('./../core/settle');\n\nvar cookies = require('./../helpers/cookies');\n\nvar buildURL = require('./../helpers/buildURL');\n\nvar buildFullPath = require('../core/buildFullPath');\n\nvar parseHeaders = require('./../helpers/parseHeaders');\n\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\n\nvar createError = require('../core/createError');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest(); // HTTP basic authentication\n\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true); // Set the request timeout in MS\n\n    request.timeout = config.timeout; // Listen for ready state\n\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      } // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n\n\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      } // Prepare the response\n\n\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n      settle(resolve, reject, response); // Clean up request\n\n      request = null;\n    }; // Handle browser request cancellation (as opposed to a manual cancellation)\n\n\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request)); // Clean up request\n\n      request = null;\n    }; // Handle low level network errors\n\n\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request)); // Clean up request\n\n      request = null;\n    }; // Handle timeout\n\n\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n\n      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED', request)); // Clean up request\n\n      request = null;\n    }; // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n\n\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    } // Add headers to the request\n\n\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    } // Add withCredentials to request if needed\n\n\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    } // Add responseType to request if needed\n\n\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    } // Handle progress if needed\n\n\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    } // Not all browsers support upload events\n\n\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel); // Clean up request\n\n        request = null;\n      });\n    }\n\n    if (!requestData) {\n      requestData = null;\n    } // Send the request\n\n\n    request.send(requestData);\n  });\n};","map":{"version":3,"sources":["D:/Desktop/MK11/mk-11/node_modules/axios/lib/adapters/xhr.js"],"names":["utils","require","settle","cookies","buildURL","buildFullPath","parseHeaders","isURLSameOrigin","createError","module","exports","xhrAdapter","config","Promise","dispatchXhrRequest","resolve","reject","requestData","data","requestHeaders","headers","isFormData","request","XMLHttpRequest","auth","username","password","unescape","encodeURIComponent","Authorization","btoa","fullPath","baseURL","url","open","method","toUpperCase","params","paramsSerializer","timeout","onreadystatechange","handleLoad","readyState","status","responseURL","indexOf","responseHeaders","getAllResponseHeaders","responseData","responseType","responseText","response","statusText","onabort","handleAbort","onerror","handleError","ontimeout","handleTimeout","timeoutErrorMessage","isStandardBrowserEnv","xsrfValue","withCredentials","xsrfCookieName","read","undefined","xsrfHeaderName","forEach","setRequestHeader","val","key","toLowerCase","isUndefined","e","onDownloadProgress","addEventListener","onUploadProgress","upload","cancelToken","promise","then","onCanceled","cancel","abort","send"],"mappings":"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","sourcesContent":["'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar cookies = require('./../helpers/cookies');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n"]},"metadata":{},"sourceType":"script"}