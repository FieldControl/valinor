{"ast":null,"code":"/*!\n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n(function () {\n  'use strict';\n  /** Global Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n\n  var HowlerGlobal = function () {\n    this.init();\n  };\n\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function () {\n      var self = this || Howler; // Create a global ID counter.\n\n      self._counter = 1000; // Pool of unlocked HTML5 Audio objects.\n\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10; // Internal properties.\n\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = typeof window !== 'undefined' && window.navigator ? window.navigator : null; // Public properties.\n\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null; // Set to false to disable the auto audio unlocker.\n\n      self.autoUnlock = true; // Setup the various state values for global tracking.\n\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function (vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol); // If we don't have an AudioContext created yet, run the setup.\n\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol; // Don't update any of the nodes if we are muted.\n\n        if (self._muted) {\n          return self;\n        } // When using Web Audio, we just need to adjust the master gain.\n\n\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        } // Loop through and change volume for all HTML5 audio nodes.\n\n\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and change the volumes.\n\n\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function (muted) {\n      var self = this || Howler; // If we don't have an AudioContext created yet, run the setup.\n\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted; // With Web Audio, we just need to mute the master gain.\n\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      } // Loop through and mute all HTML5 Audio nodes.\n\n\n      for (var i = 0; i < self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and mark the audio node as muted.\n\n\n          for (var j = 0; j < ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = muted ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function () {\n      var self = this || Howler; // Loop through all Howls and stop them.\n\n      for (var i = 0; i < self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function () {\n      var self = this || Howler;\n\n      for (var i = self._howls.length - 1; i >= 0; i--) {\n        self._howls[i].unload();\n      } // Create a new AudioContext to make sure it is fully reset.\n\n\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function (ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function () {\n      var self = this || Howler; // Keeps track of the suspend/resume state of the AudioContext.\n\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended'; // Automatically begin the 30-second suspend process\n\n      self._autoSuspend(); // Check if audio is available.\n\n\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio(); // Check if the canplaythrough event is available.\n\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch (e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      } // Test to make sure audio isn't disabled in Internet Explorer.\n\n\n      try {\n        var test = new Audio();\n\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {} // Check for supported codecs.\n\n\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function () {\n      var self = this || Howler;\n      var audioTest = null; // Must wrap in a try/catch because IE11 in server mode throws an error.\n\n      try {\n        audioTest = typeof Audio !== 'undefined' ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, ''); // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n\n      var ua = self._navigator ? self._navigator.userAgent : '';\n      var checkOpera = ua.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33;\n      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;\n      var safariVersion = ua.match(/Version\\/(.*?) /);\n      var isOldSafari = checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15;\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function () {\n      var self = this || Howler; // Only run this if Web Audio is supported and it hasn't already been unlocked.\n\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false; // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      } // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n\n\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050); // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n\n      var unlock = function (e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio(); // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n\n            audioNode._unlocked = true; // Add the audio node to the pool.\n\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        } // Loop through any assigned audio nodes and unlock them.\n\n\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and unlock the audio nodes.\n\n\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n\n                sound._node.load();\n              }\n            }\n          }\n        } // Fix Android can not play in suspend state.\n\n\n        self._autoResume(); // Create an empty buffer.\n\n\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination); // Play the empty buffer.\n\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        } // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n\n\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        } // Setup a timeout to check that we are unlocked on the next event loop.\n\n\n        source.onended = function () {\n          source.disconnect(0); // Update the unlocked state and prevent this check from happening again.\n\n          self._audioUnlocked = true; // Remove the touch start listener.\n\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n          document.removeEventListener('keydown', unlock, true); // Let all sounds know that audio has been unlocked.\n\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      }; // Setup a touch start listener to attempt an unlock in.\n\n\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      document.addEventListener('keydown', unlock, true);\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function () {\n      var self = this || Howler; // Return the next object from the pool if one exists.\n\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      } //.Check if the audio is locked and throw a warning.\n\n\n      var testPlay = new Audio().play();\n\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function () {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function (audio) {\n      var self = this || Howler; // Don't add audio to the pool if we don't know if it has been unlocked.\n\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function () {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      } // Check if any sounds are playing.\n\n\n      for (var i = 0; i < self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j = 0; j < self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      } // If no sound has played after 30 seconds, suspend the context.\n\n\n      self._suspendTimer = setTimeout(function () {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending'; // Handle updating the state of the audio context after suspending.\n\n        var handleSuspension = function () {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n\n            self._autoResume();\n          }\n        }; // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n\n\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function () {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function () {\n          self.state = 'running'; // Emit to all Howls that the audio has resumed.\n\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  }; // Setup the global audio controller.\n\n  var Howler = new HowlerGlobal();\n  /** Group Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n\n  var Howl = function (o) {\n    var self = this; // Throw an error if no source is provided.\n\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function (o) {\n      var self = this; // If we don't have an AudioContext created yet, run the setup.\n\n      if (!Howler.ctx) {\n        setupAudioContext();\n      } // Setup user-defined default properties.\n\n\n      self._autoplay = o.autoplay || false;\n      self._format = typeof o.format !== 'string' ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = typeof o.preload === 'boolean' || o.preload === 'metadata' ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = typeof o.src !== 'string' ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false\n      }; // Setup all other default properties.\n\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false; // Setup event listeners.\n\n      self._onend = o.onend ? [{\n        fn: o.onend\n      }] : [];\n      self._onfade = o.onfade ? [{\n        fn: o.onfade\n      }] : [];\n      self._onload = o.onload ? [{\n        fn: o.onload\n      }] : [];\n      self._onloaderror = o.onloaderror ? [{\n        fn: o.onloaderror\n      }] : [];\n      self._onplayerror = o.onplayerror ? [{\n        fn: o.onplayerror\n      }] : [];\n      self._onpause = o.onpause ? [{\n        fn: o.onpause\n      }] : [];\n      self._onplay = o.onplay ? [{\n        fn: o.onplay\n      }] : [];\n      self._onstop = o.onstop ? [{\n        fn: o.onstop\n      }] : [];\n      self._onmute = o.onmute ? [{\n        fn: o.onmute\n      }] : [];\n      self._onvolume = o.onvolume ? [{\n        fn: o.onvolume\n      }] : [];\n      self._onrate = o.onrate ? [{\n        fn: o.onrate\n      }] : [];\n      self._onseek = o.onseek ? [{\n        fn: o.onseek\n      }] : [];\n      self._onunlock = o.onunlock ? [{\n        fn: o.onunlock\n      }] : [];\n      self._onresume = []; // Web Audio or HTML5 Audio?\n\n      self._webAudio = Howler.usingWebAudio && !self._html5; // Automatically try to enable audio.\n\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      } // Keep track of this Howl group in the global controller.\n\n\n      Howler._howls.push(self); // If they selected autoplay, add a play event to the load queue.\n\n\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function () {\n            self.play();\n          }\n        });\n      } // Load the source file unless otherwise specified.\n\n\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function () {\n      var self = this;\n      var url = null; // If no audio is available, quit immediately.\n\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n\n        return;\n      } // Make sure our source is in an array.\n\n\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      } // Loop through the sources and pick the first one that is compatible.\n\n\n      for (var i = 0; i < self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n\n            continue;\n          } // Extract the file extension from the URL or base64 data URI.\n\n\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        } // Log a warning if no extension was found.\n\n\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        } // Check if this extension is available.\n\n\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading'; // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      } // Create a new sound object and add it to the pool.\n\n\n      new Sound(self); // Load and decode the audio data for playback.\n\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function (sprite, internal) {\n      var self = this;\n      var id = null; // Determine if a sprite, sound id or nothing was passed\n\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default'; // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n\n        if (!self._playLock) {\n          var num = 0;\n\n          for (var i = 0; i < self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      } // Get the selected node, or get one from the pool.\n\n\n      var sound = id ? self._soundById(id) : self._inactiveSound(); // If the sound doesn't exist, do nothing.\n\n      if (!sound) {\n        return null;\n      } // Select the sprite definition.\n\n\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      } // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n\n\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite; // Mark this sound as not ended in case another sound is played before this one loads.\n\n        sound._ended = false; // Add the sound to the queue to be played on load.\n\n        var soundId = sound._id;\n\n        self._queue.push({\n          event: 'play',\n          action: function () {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      } // Don't play the sound if an id was passed and it is already playing.\n\n\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      } // Make sure the AudioContext isn't suspended, and resume it if it is.\n\n\n      if (self._webAudio) {\n        Howler._autoResume();\n      } // Determine how long to play for and where to start playing.\n\n\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000 - seek);\n      var timeout = duration * 1000 / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite; // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n\n      sound._ended = false; // Update the parameters of the sound.\n\n      var setParams = function () {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      }; // End the sound instantly if seek is at the end.\n\n\n      if (seek >= stop) {\n        self._ended(sound);\n\n        return;\n      } // Begin the actual playback.\n\n\n      var node = sound._node;\n\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function () {\n          self._playLock = false;\n          setParams();\n\n          self._refreshBuffer(sound); // Setup the playback params.\n\n\n          var vol = sound._muted || self._muted ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime; // Play the sound using the supported method.\n\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          } // Start a new timer if none is present.\n\n\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function () {\n              self._emit('play', sound._id);\n\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true; // Wait for the audio context to resume before playing.\n\n          self.once('resume', playWebAudio); // Cancel the end timer.\n\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function () {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate; // Some browsers will throw an error if this is called without user interaction.\n\n          try {\n            var play = node.play(); // Support older browsers that don't support promises, and thus don't have this issue.\n\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true; // Set param values immediately.\n\n              setParams(); // Releases the lock and executes queued actions.\n\n              play.then(function () {\n                self._playLock = false;\n                node._unlocked = true;\n\n                if (!internal) {\n                  self._emit('play', sound._id);\n                } else {\n                  self._loadQueue();\n                }\n              }).catch(function () {\n                self._playLock = false;\n\n                self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.'); // Reset the ended and paused values.\n\n\n                sound._ended = true;\n                sound._paused = true;\n              });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n\n              self._emit('play', sound._id);\n            } // Setting rate before playing won't work in IE, so we set it again here.\n\n\n            node.playbackRate = sound._rate; // If the node is still paused, then we can assume there was a playback issue.\n\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.');\n\n              return;\n            } // Setup the end timer on sprites or listen for the ended event.\n\n\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function () {\n                // Fire ended on this audio node.\n                self._ended(sound); // Clear this listener.\n\n\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        }; // If this is streaming audio, make sure the src is set and load again.\n\n\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        } // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n\n\n        var loadedNoReadyState = window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS;\n\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          self._state = 'loading';\n\n          var listener = function () {\n            self._state = 'loaded'; // Begin playback.\n\n            playHtml5(); // Clear this listener.\n\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n\n          node.addEventListener(Howler._canPlayEvent, listener, false); // Cancel the end timer.\n\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function (id) {\n      var self = this; // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function () {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      } // If no id is passed, get all ID's to be paused.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]); // Get the sound.\n\n\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true; // Stop currently running fades.\n\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              } // Clean up the buffer source.\n\n\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        } // Fire the pause event, unless `true` is passed as the 2nd argument.\n\n\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function (id, internal) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to stop when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function () {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      } // If no id is passed, get all ID's to be stopped.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]); // Get the sound.\n\n\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true; // Stop currently running fades.\n\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                } // Clean up the buffer source.\n\n\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n\n              sound._node.pause(); // If this is a live stream, stop download once the audio is stopped.\n\n\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function (muted, id) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to mute when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function () {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      } // If applying mute/unmute to all sounds, update the group's value.\n\n\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      } // If no id is passed, get all ID's to be muted.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted; // Cancel active fade and set the volume to the end value.\n\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function () {\n      var self = this;\n      var args = arguments;\n      var vol, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // Update the volume or return the current volume.\n\n\n      var sound;\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function () {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        } // Set the group volume.\n\n\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        } // Update one or all volumes.\n\n\n        id = self._getSoundIds(id);\n\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol; // Stop currently running fades.\n\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function (from, to, len, id) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to fade when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function () {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      } // Make sure the to/from/len values are numbers.\n\n\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len); // Set the volume to the start position.\n\n      self.volume(from, id); // Fade the volume of one or all sounds.\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]); // Create a linear fade or fall back to timeouts with HTML5 Audio.\n\n\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          } // If we are using Web Audio, let the native methods do the actual fade.\n\n\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + len / 1000;\n            sound._volume = from;\n\n            sound._node.gain.setValueAtTime(from, currentTime);\n\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function (sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, steps > 0 ? len / steps : len);\n      var lastTick = Date.now(); // Store the value being faded to.\n\n      sound._fadeTo = to; // Update the volume value on each interval tick.\n\n      sound._interval = setInterval(function () {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick; // Round to within 2 decimal points.\n\n        vol = Math.round(vol * 100) / 100; // Make sure the volume is in the right bounds.\n\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        } // Change the volume.\n\n\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        } // Set the group's volume.\n\n\n        if (isGroup) {\n          self._volume = vol;\n        } // When the fade is complete, stop it and fire event.\n\n\n        if (to < from && vol <= to || to > from && vol >= to) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function (id) {\n      var self = this;\n\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function () {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound; // Determine the values for loop and id.\n\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      } // If no id is passed, get all ID's to be looped.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop; // If playing, restart playback to ensure looping updates.\n\n              if (self.playing(ids[i])) {\n                self.pause(ids[i], true);\n                self.play(ids[i], true);\n              }\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function () {\n      var self = this;\n      var args = arguments;\n      var rate, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // Update the playback rate or return the current value.\n\n\n      var sound;\n\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function () {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        } // Set the group rate.\n\n\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        } // Update one or all volumes.\n\n\n        id = self._getSoundIds(id);\n\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n\n            sound._rate = rate; // Change the playback rate.\n\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            } // Reset the timers.\n\n\n            var seek = self.seek(id[i]);\n            var duration = (self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000 - seek;\n            var timeout = duration * 1000 / Math.abs(sound._rate); // Start a new end timer if sound is already playing.\n\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function () {\n      var self = this;\n      var args = arguments;\n      var seek, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        if (self._sounds.length) {\n          id = self._sounds[0]._id;\n        }\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // If there is no ID, bail out.\n\n\n      if (typeof id === 'undefined') {\n        return 0;\n      } // If the sound hasn't loaded, add it to the load queue to seek when capable.\n\n\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function () {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      } // Get the sound.\n\n\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n\n          if (playing) {\n            self.pause(id, true);\n          } // Move the position of the track and cancel timer.\n\n\n          sound._seek = seek;\n          sound._ended = false;\n\n          self._clearTimer(id); // Update the seek position for HTML5 Audio.\n\n\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          } // Seek and emit when ready.\n\n\n          var seekAndEmit = function () {\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n\n            self._emit('seek', id);\n          }; // Wait for the play lock to be unset before emitting (HTML5 Audio).\n\n\n          if (playing && !self._webAudio) {\n            var emitSeek = function () {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function (id) {\n      var self = this; // Check the passed sound ID (if any).\n\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n\n        return sound ? !sound._paused : false;\n      } // Otherwise, loop through all sounds and check if any are playing.\n\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function (id) {\n      var self = this;\n      var duration = self._duration; // If we pass an ID, get the sound and return the sprite length.\n\n      var sound = self._soundById(id);\n\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function () {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function () {\n      var self = this; // Stop playing any active sounds.\n\n      var sounds = self._sounds;\n\n      for (var i = 0; i < sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        } // Remove the source or disconnect.\n\n\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node); // Remove any event listeners.\n\n\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false); // Release the Audio object back to the pool.\n\n\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        } // Empty out all of the nodes.\n\n\n        delete sounds[i]._node; // Make sure all timers are cleared out.\n\n        self._clearTimer(sounds[i]._id);\n      } // Remove the references in the global Howler object.\n\n\n      var index = Howler._howls.indexOf(self);\n\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      } // Delete this sound from the cache (if no other Howl is using it).\n\n\n      var remCache = true;\n\n      for (i = 0; i < Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      } // Clear global errors.\n\n\n      Howler.noAudio = false; // Clear out `self`.\n\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function (event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {\n          id: id,\n          fn: fn,\n          once: once\n        } : {\n          id: id,\n          fn: fn\n        });\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function (event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0; // Allow passing just an event and ID.\n\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i = 0; i < events.length; i++) {\n          var isId = id === events[i].id;\n\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n\n        for (i = 0; i < keys.length; i++) {\n          if (keys[i].indexOf('_on') === 0 && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function (event, fn, id) {\n      var self = this; // Setup the event listener.\n\n      self.on(event, fn, id, 1);\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function (event, id, msg) {\n      var self = this;\n      var events = self['_on' + event]; // Loop through event store and fire all functions.\n\n      for (var i = events.length - 1; i >= 0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function (fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0); // If this event was setup with `once`, remove it.\n\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      } // Pass the event type into load queue so that it can continue stepping.\n\n\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function (event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0]; // Remove this task if a matching event was passed.\n\n        if (task.event === event) {\n          self._queue.shift();\n\n          self._loadQueue();\n        } // Run the task if no event type is passed.\n\n\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function (sound) {\n      var self = this;\n      var sprite = sound._sprite; // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      } // Should this sound loop?\n\n\n      var loop = !!(sound._loop || self._sprite[sprite][2]); // Fire the ended event.\n\n      self._emit('end', sound._id); // Restart the playback for HTML5 Audio loop.\n\n\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      } // Restart this timer if on a Web Audio loop.\n\n\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n        var timeout = (sound._stop - sound._start) * 1000 / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      } // Mark the node as paused.\n\n\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n\n        self._clearTimer(sound._id); // Clean up the buffer source.\n\n\n        self._cleanBuffer(sound._node); // Attempt to auto-suspend AudioContext if no sounds are still playing.\n\n\n        Howler._autoSuspend();\n      } // When using a sprite, end the track.\n\n\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function (id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function (id) {\n      var self = this; // Loop through all sounds and find the one with this ID.\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function () {\n      var self = this;\n\n      self._drain(); // Find the first inactive node to recycle.\n\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      } // If no inactive node was found, create a new one.\n\n\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function () {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0; // If there are less sounds than the max pool size, we are done.\n\n      if (self._sounds.length < limit) {\n        return;\n      } // Count the number of inactive sounds.\n\n\n      for (i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      } // Remove excess inactive sounds, going in reverse order.\n\n\n      for (i = self._sounds.length - 1; i >= 0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          } // Remove sounds until we have the pool size.\n\n\n          self._sounds.splice(i, 1);\n\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function (id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n\n        for (var i = 0; i < self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function (sound) {\n      var self = this; // Setup the buffer source for playback.\n\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src]; // Connect to the correct node.\n\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      } // Setup looping and playback rate.\n\n\n      sound._node.bufferSource.loop = sound._loop;\n\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function (node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n\n        if (isIOS) {\n          try {\n            node.bufferSource.buffer = Howler._scratchBuffer;\n          } catch (e) {}\n        }\n      }\n\n      node.bufferSource = null;\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function (node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n  /** Single Sound Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n\n  var Sound = function (howl) {\n    this._parent = howl;\n    this.init();\n  };\n\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function () {\n      var self = this;\n      var parent = self._parent; // Setup the default parameters.\n\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default'; // Generate a unique ID for this sound.\n\n      self._id = ++Howler._counter; // Add itself to the parent's pool.\n\n      parent._sounds.push(self); // Create the new node.\n\n\n      self.create();\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function () {\n      var self = this;\n      var parent = self._parent;\n      var volume = Howler._muted || self._muted || self._parent._muted ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n\n        self._node.paused = true;\n\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio(); // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n\n        self._errorFn = self._errorListener.bind(self);\n\n        self._node.addEventListener('error', self._errorFn, false); // Listen for 'canplaythrough' event to let us know the sound is ready.\n\n\n        self._loadFn = self._loadListener.bind(self);\n\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false); // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n\n\n        self._endFn = self._endListener.bind(self);\n\n        self._node.addEventListener('ended', self._endFn, false); // Setup the new audio node.\n\n\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume(); // Begin loading the source.\n\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function () {\n      var self = this;\n      var parent = self._parent; // Reset all of the parameters of this sound.\n\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default'; // Generate a new ID so that it isn't confused with the previous sound.\n\n      self._id = ++Howler._counter;\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function () {\n      var self = this; // Fire an error event and pass back the code.\n\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0); // Clear the event listener.\n\n\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function () {\n      var self = this;\n      var parent = self._parent; // Round up the duration to account for the lower precision in HTML5 Audio.\n\n      parent._duration = Math.ceil(self._node.duration * 10) / 10; // Setup a sprite if none is defined.\n\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {\n          __default: [0, parent._duration * 1000]\n        };\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n\n        parent._emit('load');\n\n        parent._loadQueue();\n      } // Clear the event listener.\n\n\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function () {\n      var self = this;\n      var parent = self._parent; // Only handle the `ended`` event if the duration is Infinity.\n\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10; // Update the sprite that corresponds to the real duration.\n\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        } // Run the regular ended method.\n\n\n        parent._ended(self);\n      } // Clear the event listener since the duration is now correct.\n\n\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n  /** Helper Methods **/\n\n  /***************************************************************************/\n\n  var cache = {};\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n\n  var loadBuffer = function (self) {\n    var url = self._src; // Check if the buffer has already been cached and use it instead.\n\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration; // Load the sound into this Howl.\n\n      loadSound(self);\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n\n      for (var i = 0; i < data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer'; // Apply any custom headers to the request.\n\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function (key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function () {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n\n      xhr.onerror = function () {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n\n      safeXhrSend(xhr);\n    }\n  };\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n\n\n  var safeXhrSend = function (xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n\n\n  var decodeAudioData = function (arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function () {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    }; // Load the sound on success.\n\n\n    var success = function (buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    }; // Decode the buffer into an audio source.\n\n\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  };\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n\n\n  var loadSound = function (self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    } // Setup a sprite if none is defined.\n\n\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {\n        __default: [0, self._duration * 1000]\n      };\n    } // Fire the loaded event.\n\n\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n\n      self._emit('load');\n\n      self._loadQueue();\n    }\n  };\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n\n\n  var setupAudioContext = function () {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    } // Check if we are using Web Audio and setup the AudioContext if we are.\n\n\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch (e) {\n      Howler.usingWebAudio = false;\n    } // If the audio context creation still failed, set using web audio to false.\n\n\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    } // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n\n\n    var iOS = /iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform);\n\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    } // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n\n\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    } // Re-run the setup on Howler.\n\n\n    Howler._setup();\n  }; // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n\n\n  if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  } // Add support for CommonJS libraries such as browserify.\n\n\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  } // Add to global in Node.js (for testing, etc).\n\n\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {\n    // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n\n(function () {\n  'use strict'; // Setup default properties.\n\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n  /** Global Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n\n  HowlerGlobal.prototype.stereo = function (pan) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Loop through all Howls and update their stereo panning.\n\n\n    for (var i = self._howls.length - 1; i >= 0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n\n\n  HowlerGlobal.prototype.pos = function (x, y, z) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? self._pos[1] : y;\n    z = typeof z !== 'number' ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n\n\n  HowlerGlobal.prototype.orientation = function (x, y, z, xUp, yUp, zUp) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    var or = self._orientation;\n    y = typeof y !== 'number' ? or[1] : y;\n    z = typeof z !== 'number' ? or[2] : z;\n    xUp = typeof xUp !== 'number' ? or[3] : xUp;\n    yUp = typeof yUp !== 'number' ? or[4] : yUp;\n    zUp = typeof zUp !== 'number' ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n  /** Group Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n\n\n  Howl.prototype.init = function (_super) {\n    return function (o) {\n      var self = this; // Setup user-defined default properties.\n\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      }; // Setup event listeners.\n\n      self._onstereo = o.onstereo ? [{\n        fn: o.onstereo\n      }] : [];\n      self._onpos = o.onpos ? [{\n        fn: o.onpos\n      }] : [];\n      self._onorientation = o.onorientation ? [{\n        fn: o.onorientation\n      }] : []; // Complete initilization with howler.js core's init function.\n\n      return _super.call(this, o);\n    };\n  }(Howl.prototype.init);\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n\n\n  Howl.prototype.stereo = function (pan, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function () {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    } // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n\n\n    var pannerType = typeof Howler.ctx.createStereoPanner === 'undefined' ? 'spatial' : 'stereo'; // Setup the group's stereo panning if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    } // Change the streo panning of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower'; // Check if there is a panner setup and create a new one if not.\n\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n\n\n  Howl.prototype.pos = function (x, y, z, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change position when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function () {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? 0 : y;\n    z = typeof z !== 'number' ? -0.5 : z; // Setup the group's spatial position if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    } // Change the spatial position of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n\n\n  Howl.prototype.orientation = function (x, y, z, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function () {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? self._orientation[1] : y;\n    z = typeof z !== 'number' ? self._orientation[2] : z; // Setup the group's spatial orientation if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    } // Change the spatial orientation of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n\n\n  Howl.prototype.pannerAttr = function () {\n    var self = this;\n    var args = arguments;\n    var o, id, sound; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // Determine the values based on arguments.\n\n\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0]; // Set the grou's panner attribute values.\n\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    } // Update the values of the specified sounds.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        }; // Update the panner values or create a new panner if none exists.\n\n        var panner = sound._panner;\n\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          } // Create a new panner node.\n\n\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n  /** Single Sound Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n\n\n  Sound.prototype.init = function (_super) {\n    return function () {\n      var self = this;\n      var parent = self._parent; // Setup user-defined default properties.\n\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr; // Complete initilization with howler.js core Sound's init function.\n\n      _super.call(this); // If a stereo or position was specified, set it up.\n\n\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  }(Sound.prototype.init);\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n\n\n  Sound.prototype.reset = function (_super) {\n    return function () {\n      var self = this;\n      var parent = self._parent; // Reset all spatial plugin properties on this sound.\n\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr; // If a stereo or position was specified, set it up.\n\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n\n        self._panner = undefined;\n\n        parent._refreshBuffer(self);\n      } // Complete resetting of the sound.\n\n\n      return _super.call(this);\n    };\n  }(Sound.prototype.reset);\n  /** Helper Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n\n\n  var setupPanner = function (sound, type) {\n    type = type || 'spatial'; // Create the new panner node.\n\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node); // Update the connections.\n\n\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();","map":{"version":3,"sources":["D:/Desktop/Núcleo das pastas/Programação/MK11/node_modules/howler/dist/howler.js"],"names":["HowlerGlobal","init","prototype","self","Howler","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","i","length","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","stop","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","test","oncanplaythrough","e","_setupCodecs","audioTest","err","canPlayType","mpegTest","ua","userAgent","checkOpera","match","isOldOpera","parseInt","split","checkSafari","indexOf","safariVersion","isOldSafari","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","m4b","mp4","weba","webm","dolby","flac","_unlockAudio","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","_emit","addEventListener","_obtainHtml5Audio","pop","testPlay","play","Promise","then","catch","console","warn","audio","push","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","handleSuspension","_resumeAfterSuspend","Howl","o","src","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhr","method","xhr","headers","withCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","event","action","url","str","exec","toLowerCase","location","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","max","_seek","duration","timeout","abs","setParams","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","arguments","_clearSound","_interval","args","index","apply","fade","from","to","len","min","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","Date","now","_fadeTo","setInterval","tick","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","playing","seekAndEmit","emitSeek","realTime","rateSeek","sounds","_errorFn","_loadFn","_endFn","splice","remCache","cache","on","events","off","isId","keys","Object","Array","isArray","msg","call","task","shift","ended","_drain","reset","limit","cnt","_panner","isIOS","vendor","checkIE","howl","_parent","parent","create","createGain","createGainNode","_errorListener","_loadListener","_endListener","code","ceil","__default","loadSound","data","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","XMLHttpRequest","open","responseType","forEach","key","setRequestHeader","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","define","amd","exports","global","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_super","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner"],"mappings":"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","sourcesContent":["/*!\n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var ua = self._navigator ? self._navigator.userAgent : '';\n      var checkOpera = ua.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;\n      var safariVersion = ua.match(/Version\\/(.*?) /);\n      var isOldSafari = (checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n          document.removeEventListener('keydown', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      document.addEventListener('keydown', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                  } else {\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          self._state = 'loading';\n\n          var listener = function() {\n            self._state = 'loaded';\n            \n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n\n              // If playing, restart playback to ensure looping updates.\n              if (self.playing(ids[i])) {\n                self.pause(ids[i], true);\n                self.play(ids[i], true);\n              }\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        if (self._sounds.length) {\n          id = self._sounds[0]._id;\n        }\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return 0;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n\n            self._emit('seek', id);\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n"]},"metadata":{},"sourceType":"script"}